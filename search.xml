<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>redis命令</title>
      <link href="/2025/05/25/redis%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/05/25/redis%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis的命令"><a href="#Redis的命令" class="headerlink" title="Redis的命令"></a>Redis的命令</h2><p>双击start.bat启动服务端，双击redis-cil.exe启动命令客户端，命令一般在在客户端进行。</p><p>使用ping指令查看服务是不是在线，出现PONG即为正常</p><p><img src="https://img.picui.cn/free/2025/05/18/6829a8d5002e8.png" alt="1747560664218.png"></p><h4 id="键（KEY）命令"><a href="#键（KEY）命令" class="headerlink" title="键（KEY）命令"></a>键（KEY）命令</h4><p>基本格式：指令 + 关键字</p><p>其中指令是不区分大小写的，而关键字需要区分大小写，在表格后会说明原因。</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">DEL key <br />该命令用于在 key 存在时删除 key。</td></tr><tr><td align="left">2</td><td align="left">DUMP key <br />序列化给定 key ，并返回被序列化的值。</td></tr><tr><td align="left">3</td><td align="left">EXISTS key <br />检查给定 key 是否存在。</td></tr><tr><td align="left">4</td><td align="left">EXPIRE key seconds <br />为给定 key 设置过期时间，以秒为单位计算。</td></tr><tr><td align="left">5</td><td align="left">EXPIREAT key timestamp  <br />EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td></tr><tr><td align="left">6</td><td align="left">PEXPIRE key milliseconds<br />设置 key 的过期时间以毫秒计。</td></tr><tr><td align="left">7</td><td align="left">PEXPIREAT key milliseconds-timestamp <br />设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td></tr><tr><td align="left">8</td><td align="left">KEYS pattern <br />查找所有符合给定模式( pattern)的 key 。</td></tr><tr><td align="left">9</td><td align="left">MOVE key db <br />将当前数据库的 key 移动到给定的数据库 db 当中。</td></tr><tr><td align="left">10</td><td align="left">PERSIST key <br />移除 key 的过期时间，key 将持久保持。</td></tr><tr><td align="left">11</td><td align="left">PTTL key<br />以毫秒为单位返回 key 的剩余的过期时间。</td></tr><tr><td align="left">12</td><td align="left">TTL key <br />以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td></tr><tr><td align="left">13</td><td align="left">RANDOMKEY<br />从当前数据库中随机返回一个 key 。</td></tr><tr><td align="left">14</td><td align="left">RENAME key newkey <br />修改 key 的名称</td></tr><tr><td align="left">15</td><td align="left">RENAMENX key newkey <br />仅当 newkey 不存在时，将 key 改名为 newkey 。</td></tr><tr><td align="left">16</td><td align="left">SCAN cursor [MATCH pattern] [COUNT count]<br />迭代数据库中的数据库键。</td></tr><tr><td align="left">17</td><td align="left">TYPE key <br />返回 key 所储存的值的类型。</td></tr><tr><td align="left">18</td><td align="left">SET key redis<br />创建一个key。</td></tr><tr><td align="left">19</td><td align="left">KEYS key<br />列出所有key开头的关键字，将key更换为*时列出所有关键字</td></tr></tbody></table><p>这里的key可以换成你想要的任何字符组合，但是这个和Java等基础变量命名规则一样严格大小写，比如KEY与key，ZuiLiu与zuiliu，都是两个不同的变量。</p><p>比如说新建这两个词的key</p><p><img src="https://img.picui.cn/free/2025/05/18/6829beaac8c81.png" alt="1747566255690.png"></p><p>严格按照大小写进行记录，删除时如果存在则返回1，不存在这个键时返回0</p><p><img src="C:/Users/zuiliu/AppData/Roaming/Typora/typora-user-images/image-20250518190828887.png" alt="image-20250518190828887"></p><h4 id="字符串（String）命令"><a href="#字符串（String）命令" class="headerlink" title="字符串（String）命令"></a>字符串（String）命令</h4><p>基本格式：指令 + 关键字 + 变量</p><p>Redis 的 string 可以包含任何数据，比如图片或者序列化的对象，一个 redis 中字符串 value 最多是 512M</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SET key value <br />设置指定 key 的值。</td></tr><tr><td align="left">2</td><td align="left">GET key<br />获取指定 key 的值。</td></tr><tr><td align="left">3</td><td align="left">GETRANGE key start end <br />返回 key 中字符串值的子字符</td></tr><tr><td align="left">4</td><td align="left">GETSET key value <br />将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td></tr><tr><td align="left">5</td><td align="left">GETBIT key offset<br />对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td></tr><tr><td align="left">6</td><td align="left">MGET key1 key2.. <br />获取所有(一个或多个)给定 key 的值。</td></tr><tr><td align="left">7</td><td align="left">SETBIT key offset value <br />对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td></tr><tr><td align="left">8</td><td align="left">SETEX key seconds value<br />将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td></tr><tr><td align="left">9</td><td align="left">SETNX key value <br />只有在 key 不存在时设置 key 的值。</td></tr><tr><td align="left">10</td><td align="left">SETRANGE key offset value<br />用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td></tr><tr><td align="left">11</td><td align="left">STRLEN key<br />返回 key 所储存的字符串值的长度。</td></tr><tr><td align="left">12</td><td align="left">MSET key value key value … <br />同时设置一个或多个 key-value 对。</td></tr><tr><td align="left">13</td><td align="left">MSETNX key value key value … <br />同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td></tr><tr><td align="left">14</td><td align="left">PSETEX key milliseconds value <br />这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td></tr><tr><td align="left">15</td><td align="left">INCR key <br />将 key 中储存的数字值增一。</td></tr><tr><td align="left">16</td><td align="left">INCRBY key increment<br />将 key 所储存的值加上给定的增量值（increment） 。</td></tr><tr><td align="left">17</td><td align="left">INCRBYFLOAT key increment <br />将 key 所储存的值加上给定的浮点增量值（increment） 。</td></tr><tr><td align="left">18</td><td align="left">DECR key <br />将 key 中储存的数字值减一。</td></tr><tr><td align="left">19</td><td align="left">DECRBY key decrement<br />key 所储存的值减去给定的减量值（decrement） 。</td></tr><tr><td align="left">20</td><td align="left">APPEND key value<br />如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</td></tr></tbody></table><p>与上文一致，value可以换成你想要的任何满足符合基础变量名的要求，比如说：</p><p><img src="https://img.picui.cn/free/2025/05/25/68330ac4bd0c9.png" alt="1748175563758.png"></p><p>当然，string 命令不只是存储字符串的，探索发现它可以进行计数</p><p>使用如下指令要求即可实现计数</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">INCR key<br />key 中存储的数字值+1，显示增加后的值，如果为空，则初始化为0后+1 在64位范围中</td></tr><tr><td align="left">2</td><td align="left">DECR key<br />key 中存储的数字值-1，显示减去后的值，如果为空，则初始化为0后-1 在64位范围中</td></tr><tr><td align="left">3</td><td align="left">INCRBY key increment<br>increment是可以换成64位范围以内的数字值<br>key 中存储的数字值+increment，显示增加后的值，如果为空，则初始化为0后+ncrement 在64位范围中</td></tr><tr><td align="left">4</td><td align="left">DECRBY key increment<br/>increment是可以换成64位范围以内的数字值<br/>key 中存储的数字值-increment，显示减去后的值，如果为空，则初始化为0后-ncrement 在64位范围中</td></tr></tbody></table><p><img src="https://img.picui.cn/free/2025/05/25/683310018a8ab.png" alt="1748176953887.png"></p><h4 id="列表（List）命令"><a href="#列表（List）命令" class="headerlink" title="列表（List）命令"></a>列表（List）命令</h4><p>基本格式与上面相同</p><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td>BLPOP key1 [key2 ] timeout<br>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>2</td><td>BRPOP key1 [key2 ] timeout<BR>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>3</td><td>BRPOPLPUSH source destination timeout<BR>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>4</td><td>LINDEX key index<BR>通过索引获取列表中的元素</td></tr><tr><td>5</td><td>LINSERT key BEFORE|AFTER pivot value<BR>在列表的元素前或者后插入元素</td></tr><tr><td>6</td><td>LLEN key<BR>获取列表长度</td></tr><tr><td>7</td><td>LPOP key<BR>移出并获取列表的第一个元素</td></tr><tr><td>8</td><td>LPUSH key value1 [value2]<BR>将一个或多个值插入到列表头部</td></tr><tr><td>9</td><td>LPUSHX key value<BR>将一个值插入到已存在的列表头部</td></tr><tr><td>10</td><td>LRANGE key start stop<BR>获取列表指定范围内的元素</td></tr><tr><td>11</td><td>LREM key count value<BR>移除列表元素</td></tr><tr><td>12</td><td>LSET key index value<BR>通过索引设置列表元素的值</td></tr><tr><td>13</td><td>LTRIM key start stop<BR>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td>14</td><td>RPOP key<BR>移除列表的最后一个元素，返回值为移除的元素。</td></tr><tr><td>15</td><td>RPOPLPUSH source destination<BR>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>16</td><td>RPUSH key value1 [value2]<BR>在列表中添加一个或多个值到列表尾部</td></tr><tr><td>17</td><td>RPUSHX key value<BR>为已存在的列表添加值</td></tr></tbody></table><p><img src="https://img.picui.cn/free/2025/05/25/6833129861561.png" alt="1748177567447.png"></p><h4 id="集合（Set）命令"><a href="#集合（Set）命令" class="headerlink" title="集合（Set）命令"></a>集合（Set）命令</h4><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><p>集合对象的编码可以是 intset 或者 hashtable。</p><p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td>SADD key member1 [member2]<br>向集合添加一个或多个成员</td></tr><tr><td>2</td><td>SCARD key<br/>获取集合的成员数</td></tr><tr><td>3</td><td>SDIFF key1 [key2]<br/>返回第一个集合与其他集合之间的差异。</td></tr><tr><td>4</td><td>SDIFFSTORE destination key1 [key2]<br/>返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td>5</td><td>SINTER key1 [key2]<br/>返回给定所有集合的交集</td></tr><tr><td>6</td><td>SINTERSTORE destination key1 [key2]<br/>返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td>7</td><td>SISMEMBER key member<br/>判断 member 元素是否是集合 key 的成员</td></tr><tr><td>8</td><td>SMEMBERS key<br/>返回集合中的所有成员</td></tr><tr><td>9</td><td>SMOVE source destination member<br/>将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td>10</td><td>SPOP key<br/>移除并返回集合中的一个随机元素</td></tr><tr><td>11</td><td>SRANDMEMBER key [count]<br/>返回集合中一个或多个随机数</td></tr><tr><td>12</td><td>SREM key member1 [member2]<br/>移除集合中一个或多个成员</td></tr><tr><td>13</td><td>SUNION key1 [key2]<br/>返回所有给定集合的并集</td></tr><tr><td>14</td><td>SUNIONSTORE destination key1 [key2]<br/>所有给定集合的并集存储在 destination 集合中</td></tr><tr><td>15</td><td>SSCAN key cursor [MATCH pattern] [COUNT count]<br/>迭代集合中的元素</td></tr></tbody></table><p><img src="https://img.picui.cn/free/2025/05/25/6833142c17845.png" alt="1748177970399.png"></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的配置文件</title>
      <link href="/2025/05/18/redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2025/05/18/redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis的配置文件"><a href="#Redis的配置文件" class="headerlink" title="Redis的配置文件"></a>Redis的配置文件</h3><p>位于安装路径的根目录上，全名为redis.conf </p><p>可以使用vim（Linux）或者双击（Windows）打开配置文件</p><p>当然配置文件里面注释较多，使用vim并不方便，可以使用这种格式的GET指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG GET *</span><br></pre></td></tr></table></figure><p>来获取所有的配置项目。</p><p><img src="https://img.picui.cn/free/2025/05/17/6828a27a717c8.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG GET PORT</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/05/17/6828a30728621.png" alt="1747493643233.png"></p><p>当然了，既然有GET方法，也会有SET方法，使用SET指令来对配置进行修改</p><p>格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</span><br></pre></td></tr></table></figure><p>比如修改端口为 6666 ，显示OK则修改成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG SET PORT 6666</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/05/17/6828a37923c13.png" alt="1747493758524.png"></p><h3 id="配置文件解读"><a href="#配置文件解读" class="headerlink" title="配置文件解读"></a>配置文件解读</h3><h4 id="configuration-file"><a href="#configuration-file" class="headerlink" title="configuration file"></a>configuration file</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Redis configuration file example.</span><br><span class="line">#</span><br><span class="line"># Note that in order to read the configuration file, Redis must be</span><br><span class="line"># started with the file path as first argument:</span><br><span class="line">#</span><br><span class="line"># ./redis-server /path/to/redis.conf</span><br><span class="line"></span><br><span class="line"># Note on units: when memory size is needed, it is possible to specify</span><br><span class="line"># it in the usual form of 1k 5GB 4M and so forth:</span><br><span class="line">#</span><br><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="line">#</span><br><span class="line"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><br></pre></td></tr></table></figure><p>这段是对于内存使用的解释，不区分大小写</p><h4 id="INCLUDES"><a href="#INCLUDES" class="headerlink" title="INCLUDES"></a>INCLUDES</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">################################## INCLUDES ###################################</span><br><span class="line"></span><br><span class="line"># Include one or more other config files here.  This is useful if you</span><br><span class="line"># have a standard template that goes to all Redis servers but also need</span><br><span class="line"># to customize a few per-server settings.  Include files can include</span><br><span class="line"># other files, so use this wisely.</span><br><span class="line">#</span><br><span class="line"># Note that option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span><br><span class="line"># from admin or Redis Sentinel. Since Redis always uses the last processed</span><br><span class="line"># line as value of a configuration directive, you&#x27;d better put includes</span><br><span class="line"># at the beginning of this file to avoid overwriting config change at runtime.</span><br><span class="line">#</span><br><span class="line"># If instead you are interested in using includes to override configuration</span><br><span class="line"># options, it is better to use include as the last line.</span><br><span class="line">#</span><br><span class="line"># Included paths may contain wildcards. All files matching the wildcards will</span><br><span class="line"># be included in alphabetical order.</span><br><span class="line"># Note that if an include path contains a wildcards but no files match it when</span><br><span class="line"># the server is started, the include statement will be ignored and no error will</span><br><span class="line"># be emitted.  It is safe, therefore, to include wildcard files from empty</span><br><span class="line"># directories.</span><br><span class="line">#</span><br><span class="line"># include /path/to/local.conf</span><br><span class="line"># include /path/to/other.conf</span><br><span class="line"># include /path/to/fragments/*.conf</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>一般来说redis.conf只支持一个配置文件，如果是需要配置多个文件时通过include &#x2F;path&#x2F;to&#x2F;local.conf或者别的名字导入配置，如果将此配置写在redis.conf 文件的开头，那么后面的配置会覆盖引入文件的配置，如果想以引入文件的配置为主，那么需要将 include 配置写在 redis.conf 文件的末尾。</p><h4 id="MODULES"><a href="#MODULES" class="headerlink" title="MODULES"></a>MODULES</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">################################## MODULES #####################################</span><br><span class="line"></span><br><span class="line"># Load modules at startup. If the server is not able to load modules</span><br><span class="line"># it will abort. It is possible to use multiple loadmodule directives.</span><br><span class="line">#</span><br><span class="line"># loadmodule /path/to/my_module.so</span><br><span class="line"># loadmodule /path/to/other_module.so</span><br><span class="line"># loadmodule /path/to/args_module.so [arg [arg ...]]</span><br></pre></td></tr></table></figure><p>集群功能，使用loadmodule进行新增功能自定义</p><h4 id="NETWORK"><a href="#NETWORK" class="headerlink" title="NETWORK"></a>NETWORK</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">################################## NETWORK #####################################</span><br><span class="line"></span><br><span class="line"># By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</span><br><span class="line"># for connections from all available network interfaces on the host machine.</span><br><span class="line"># It is possible to listen to just one or multiple selected interfaces using</span><br><span class="line"># the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</span><br><span class="line"># Each address can be prefixed by &quot;-&quot;, which means that redis will not fail to</span><br><span class="line"># start if the address is not available. Being not available only refers to</span><br><span class="line"># addresses that does not correspond to any network interface. Addresses that</span><br><span class="line"># are already in use will always fail, and unsupported protocols will always BE</span><br><span class="line"># silently skipped.</span><br><span class="line">#</span><br><span class="line"># Examples:</span><br><span class="line">#</span><br><span class="line"># bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses</span><br><span class="line"># bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6</span><br><span class="line"># bind * -::*                     # like the default, all available interfaces</span><br><span class="line">#</span><br><span class="line"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span><br><span class="line"># internet, binding to all the interfaces is dangerous and will expose the</span><br><span class="line"># instance to everybody on the internet. So by default we uncomment the</span><br><span class="line"># following bind directive, that will force Redis to listen only on the</span><br><span class="line"># IPv4 and IPv6 (if available) loopback interface addresses (this means Redis</span><br><span class="line"># will only be able to accept client connections from the same host that it is</span><br><span class="line"># running on).</span><br><span class="line">#</span><br><span class="line"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span><br><span class="line"># COMMENT OUT THE FOLLOWING LINE.</span><br><span class="line">#</span><br><span class="line"># You will also need to set a password unless you explicitly disable protected</span><br><span class="line"># mode.</span><br><span class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">bind 127.0.0.1 -::1</span><br><span class="line"></span><br><span class="line"># By default, outgoing connections (from replica to master, from Sentinel to</span><br><span class="line"># instances, cluster bus, etc.) are not bound to a specific local address. In</span><br><span class="line"># most cases, this means the operating system will handle that based on routing</span><br><span class="line"># and the interface through which the connection goes out.</span><br><span class="line">#</span><br><span class="line"># Using bind-source-addr it is possible to configure a specific address to bind</span><br><span class="line"># to, which may also affect how the connection gets routed.</span><br><span class="line">#</span><br><span class="line"># Example:</span><br><span class="line">#</span><br><span class="line"># bind-source-addr 10.0.0.1</span><br><span class="line"></span><br><span class="line"># Protected mode is a layer of security protection, in order to avoid that</span><br><span class="line"># Redis instances left open on the internet are accessed and exploited.</span><br><span class="line">#</span><br><span class="line"># When protected mode is on and the default user has no password, the server</span><br><span class="line"># only accepts local connections from the IPv4 address (127.0.0.1), IPv6 address</span><br><span class="line"># (::1) or Unix domain sockets.</span><br><span class="line">#</span><br><span class="line"># By default protected mode is enabled. You should disable it only if</span><br><span class="line"># you are sure you want clients from other hosts to connect to Redis</span><br><span class="line"># even if no authentication is configured.</span><br><span class="line">protected-mode yes</span><br><span class="line"></span><br><span class="line"># Redis uses default hardened security configuration directives to reduce the</span><br><span class="line"># attack surface on innocent users. Therefore, several sensitive configuration</span><br><span class="line"># directives are immutable, and some potentially-dangerous commands are blocked.</span><br><span class="line">#</span><br><span class="line"># Configuration directives that control files that Redis writes to (e.g., &#x27;dir&#x27;</span><br><span class="line"># and &#x27;dbfilename&#x27;) and that aren&#x27;t usually modified during runtime</span><br><span class="line"># are protected by making them immutable.</span><br><span class="line">#</span><br><span class="line"># Commands that can increase the attack surface of Redis and that aren&#x27;t usually</span><br><span class="line"># called by users are blocked by default.</span><br><span class="line">#</span><br><span class="line"># These can be exposed to either all connections or just local ones by setting</span><br><span class="line"># each of the configs listed below to either of these values:</span><br><span class="line">#</span><br><span class="line"># no    - Block for any connection (remain immutable)</span><br><span class="line"># yes   - Allow for any connection (no protection)</span><br><span class="line"># local - Allow only for local connections. Ones originating from the</span><br><span class="line">#         IPv4 address (127.0.0.1), IPv6 address (::1) or Unix domain sockets.</span><br><span class="line">#</span><br><span class="line"># enable-protected-configs no</span><br><span class="line"># enable-debug-command no</span><br><span class="line"># enable-module-command no</span><br><span class="line"></span><br><span class="line"># Accept connections on the specified port, default is 6379 (IANA #815344).</span><br><span class="line"># If port 0 is specified Redis will not listen on a TCP socket.</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"># TCP listen() backlog.</span><br><span class="line">#</span><br><span class="line"># In high requests-per-second environments you need a high backlog in order</span><br><span class="line"># to avoid slow clients connection issues. Note that the Linux kernel</span><br><span class="line"># will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span><br><span class="line"># make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span><br><span class="line"># in order to get the desired effect.</span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"># Unix socket.</span><br><span class="line">#</span><br><span class="line"># Specify the path for the Unix socket that will be used to listen for</span><br><span class="line"># incoming connections. There is no default, so Redis will not listen</span><br><span class="line"># on a unix socket when not specified.</span><br><span class="line">#</span><br><span class="line"># unixsocket /run/redis.sock</span><br><span class="line"># unixsocketperm 700</span><br><span class="line"></span><br><span class="line"># Close the connection after a client is idle for N seconds (0 to disable)</span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"># TCP keepalive.</span><br><span class="line">#</span><br><span class="line"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span><br><span class="line"># of communication. This is useful for two reasons:</span><br><span class="line">#</span><br><span class="line"># 1) Detect dead peers.</span><br><span class="line"># 2) Force network equipment in the middle to consider the connection to be</span><br><span class="line">#    alive.</span><br><span class="line">#</span><br><span class="line"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span><br><span class="line"># Note that to close the connection the double of the time is needed.</span><br><span class="line"># On other kernels the period depends on the kernel configuration.</span><br><span class="line">#</span><br><span class="line"># A reasonable value for this option is 300 seconds, which is the new</span><br><span class="line"># Redis default starting with Redis 3.2.1.</span><br><span class="line">tcp-keepalive 300</span><br><span class="line"></span><br><span class="line"># Apply OS-specific mechanism to mark the listening socket with the specified</span><br><span class="line"># ID, to support advanced routing and filtering capabilities.</span><br><span class="line">#</span><br><span class="line"># On Linux, the ID represents a connection mark.</span><br><span class="line"># On FreeBSD, the ID represents a socket cookie ID.</span><br><span class="line"># On OpenBSD, the ID represents a route table ID.</span><br><span class="line">#</span><br><span class="line"># The default value is 0, which implies no marking is required.</span><br><span class="line"># socket-mark-id 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>bind：绑定IP，一般是127.0.0.1，如果注释掉或者留空则会接受所有网络的链接请求</p><p>bind-source-addr : 一般由路由决定</p><p>protected-mode  :  这是一种安全保护层，防止开放在互联网上的Redis实例被未经授权地访问和利用。当保护模式开启且默认用户没有密码时，服务器仅接受来自本地回环地址的连接。默认启用，只有在确认需要从其他主机连接到Redis且不配置认证的情况下才应禁用。</p><p>port：端口，一般指服务器运行端口，默认是6379，可以修改，舒适的一点是当你开启多个redis服务时会redis自动修改端口</p><p>TCP keepalive ： 检测死对等体并保持连接活跃。</p><p>socket-mark-id ： 应用操作系统特定机制为监听套接字指定ID，支持高级路由和过滤能力。默认值为0。</p><h4 id="TLS-SSL"><a href="#TLS-SSL" class="headerlink" title="TLS&#x2F;SSL"></a>TLS&#x2F;SSL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">################################# TLS/SSL #####################################</span><br><span class="line"></span><br><span class="line"># By default, TLS/SSL is disabled. To enable it, the &quot;tls-port&quot; configuration</span><br><span class="line"># directive can be used to define TLS-listening ports. To enable TLS on the</span><br><span class="line"># default port, use:</span><br><span class="line">#</span><br><span class="line"># port 0</span><br><span class="line"># tls-port 6379</span><br><span class="line"></span><br><span class="line"># Configure a X.509 certificate and private key to use for authenticating the</span><br><span class="line"># server to connected clients, masters or cluster peers.  These files should be</span><br><span class="line"># PEM formatted.</span><br><span class="line">#</span><br><span class="line"># tls-cert-file redis.crt</span><br><span class="line"># tls-key-file redis.key</span><br><span class="line">#</span><br><span class="line"># If the key file is encrypted using a passphrase, it can be included here</span><br><span class="line"># as well.</span><br><span class="line">#</span><br><span class="line"># tls-key-file-pass secret</span><br><span class="line"></span><br><span class="line"># Normally Redis uses the same certificate for both server functions (accepting</span><br><span class="line"># connections) and client functions (replicating from a master, establishing</span><br><span class="line"># cluster bus connections, etc.).</span><br><span class="line">#</span><br><span class="line"># Sometimes certificates are issued with attributes that designate them as</span><br><span class="line"># client-only or server-only certificates. In that case it may be desired to use</span><br><span class="line"># different certificates for incoming (server) and outgoing (client)</span><br><span class="line"># connections. To do that, use the following directives:</span><br><span class="line">#</span><br><span class="line"># tls-client-cert-file client.crt</span><br><span class="line"># tls-client-key-file client.key</span><br><span class="line">#</span><br><span class="line"># If the key file is encrypted using a passphrase, it can be included here</span><br><span class="line"># as well.</span><br><span class="line">#</span><br><span class="line"># tls-client-key-file-pass secret</span><br><span class="line"></span><br><span class="line"># Configure a DH parameters file to enable Diffie-Hellman (DH) key exchange,</span><br><span class="line"># required by older versions of OpenSSL (&lt;3.0). Newer versions do not require</span><br><span class="line"># this configuration and recommend against it.</span><br><span class="line">#</span><br><span class="line"># tls-dh-params-file redis.dh</span><br><span class="line"></span><br><span class="line"># Configure a CA certificate(s) bundle or directory to authenticate TLS/SSL</span><br><span class="line"># clients and peers.  Redis requires an explicit configuration of at least one</span><br><span class="line"># of these, and will not implicitly use the system wide configuration.</span><br><span class="line">#</span><br><span class="line"># tls-ca-cert-file ca.crt</span><br><span class="line"># tls-ca-cert-dir /etc/ssl/certs</span><br><span class="line"></span><br><span class="line"># By default, clients (including replica servers) on a TLS port are required</span><br><span class="line"># to authenticate using valid client side certificates.</span><br><span class="line">#</span><br><span class="line"># If &quot;no&quot; is specified, client certificates are not required and not accepted.</span><br><span class="line"># If &quot;optional&quot; is specified, client certificates are accepted and must be</span><br><span class="line"># valid if provided, but are not required.</span><br><span class="line">#</span><br><span class="line"># tls-auth-clients no</span><br><span class="line"># tls-auth-clients optional</span><br><span class="line"></span><br><span class="line"># By default, a Redis replica does not attempt to establish a TLS connection</span><br><span class="line"># with its master.</span><br><span class="line">#</span><br><span class="line"># Use the following directive to enable TLS on replication links.</span><br><span class="line">#</span><br><span class="line"># tls-replication yes</span><br><span class="line"></span><br><span class="line"># By default, the Redis Cluster bus uses a plain TCP connection. To enable</span><br><span class="line"># TLS for the bus protocol, use the following directive:</span><br><span class="line">#</span><br><span class="line"># tls-cluster yes</span><br><span class="line"></span><br><span class="line"># By default, only TLSv1.2 and TLSv1.3 are enabled and it is highly recommended</span><br><span class="line"># that older formally deprecated versions are kept disabled to reduce the attack surface.</span><br><span class="line"># You can explicitly specify TLS versions to support.</span><br><span class="line"># Allowed values are case insensitive and include &quot;TLSv1&quot;, &quot;TLSv1.1&quot;, &quot;TLSv1.2&quot;,</span><br><span class="line"># &quot;TLSv1.3&quot; (OpenSSL &gt;= 1.1.1) or any combination.</span><br><span class="line"># To enable only TLSv1.2 and TLSv1.3, use:</span><br><span class="line">#</span><br><span class="line"># tls-protocols &quot;TLSv1.2 TLSv1.3&quot;</span><br><span class="line"></span><br><span class="line"># Configure allowed ciphers.  See the ciphers(1ssl) manpage for more information</span><br><span class="line"># about the syntax of this string.</span><br><span class="line">#</span><br><span class="line"># Note: this configuration applies only to &lt;= TLSv1.2.</span><br><span class="line">#</span><br><span class="line"># tls-ciphers DEFAULT:!MEDIUM</span><br><span class="line"></span><br><span class="line"># Configure allowed TLSv1.3 ciphersuites.  See the ciphers(1ssl) manpage for more</span><br><span class="line"># information about the syntax of this string, and specifically for TLSv1.3</span><br><span class="line"># ciphersuites.</span><br><span class="line">#</span><br><span class="line"># tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256</span><br><span class="line"></span><br><span class="line"># When choosing a cipher, use the server&#x27;s preference instead of the client</span><br><span class="line"># preference. By default, the server follows the client&#x27;s preference.</span><br><span class="line">#</span><br><span class="line"># tls-prefer-server-ciphers yes</span><br><span class="line"></span><br><span class="line"># By default, TLS session caching is enabled to allow faster and less expensive</span><br><span class="line"># reconnections by clients that support it. Use the following directive to disable</span><br><span class="line"># caching.</span><br><span class="line">#</span><br><span class="line"># tls-session-caching no</span><br><span class="line"></span><br><span class="line"># Change the default number of TLS sessions cached. A zero value sets the cache</span><br><span class="line"># to unlimited size. The default size is 20480.</span><br><span class="line">#</span><br><span class="line"># tls-session-cache-size 5000</span><br><span class="line"></span><br><span class="line"># Change the default timeout of cached TLS sessions. The default timeout is 300</span><br><span class="line"># seconds.</span><br><span class="line">#</span><br><span class="line"># tls-session-cache-timeout 60</span><br></pre></td></tr></table></figure><p>Redis 6.0 以上新增的功能，多用于通信与数据加密的证书配置，在高并发场景下，加密解密操作可能会带来额外的CPU开销。</p><h4 id="GENERAL"><a href="#GENERAL" class="headerlink" title="GENERAL"></a>GENERAL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">################################# GENERAL #####################################</span><br><span class="line"></span><br><span class="line"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span><br><span class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="line"># When Redis is supervised by upstart or systemd, this parameter has no impact.</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"># If you run Redis from upstart or systemd, Redis can interact with your</span><br><span class="line"># supervision tree. Options:</span><br><span class="line">#   supervised no      - no supervision interaction</span><br><span class="line">#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span><br><span class="line">#                        requires &quot;expect stop&quot; in your upstart job config</span><br><span class="line">#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</span><br><span class="line">#                        on startup, and updating Redis status on a regular</span><br><span class="line">#                        basis.</span><br><span class="line">#   supervised auto    - detect upstart or systemd method based on</span><br><span class="line">#                        UPSTART_JOB or NOTIFY_SOCKET environment variables</span><br><span class="line"># Note: these supervision methods only signal &quot;process is ready.&quot;</span><br><span class="line">#       They do not enable continuous pings back to your supervisor.</span><br><span class="line">#</span><br><span class="line"># The default is &quot;no&quot;. To run under upstart/systemd, you can simply uncomment</span><br><span class="line"># the line below:</span><br><span class="line">#</span><br><span class="line"># supervised auto</span><br><span class="line"></span><br><span class="line"># If a pid file is specified, Redis writes it where specified at startup</span><br><span class="line"># and removes it at exit.</span><br><span class="line">#</span><br><span class="line"># When the server runs non daemonized, no pid file is created if none is</span><br><span class="line"># specified in the configuration. When the server is daemonized, the pid file</span><br><span class="line"># is used even if not specified, defaulting to &quot;/var/run/redis.pid&quot;.</span><br><span class="line">#</span><br><span class="line"># Creating a pid file is best effort: if Redis is not able to create it</span><br><span class="line"># nothing bad happens, the server will start and run normally.</span><br><span class="line">#</span><br><span class="line"># Note that on modern Linux systems &quot;/run/redis.pid&quot; is more conforming</span><br><span class="line"># and should be used instead.</span><br><span class="line">pidfile ./redis_6379.pid</span><br><span class="line"></span><br><span class="line"># Specify the server verbosity level.</span><br><span class="line"># This can be one of:</span><br><span class="line"># debug (a lot of information, useful for development/testing)</span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"># notice (moderately verbose, what you want in production probably)</span><br><span class="line"># warning (only very important / critical messages are logged)</span><br><span class="line"># nothing (nothing is logged)</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"># Specify the log file name. Also the empty string can be used to force</span><br><span class="line"># Redis to log on the standard output. Note that if you use standard</span><br><span class="line"># output for logging but daemonize, logs will be sent to /dev/null</span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line"># To enable logging to the system logger, just set &#x27;syslog-enabled&#x27; to yes,</span><br><span class="line"># and optionally update the other syslog parameters to suit your needs.</span><br><span class="line"># syslog-enabled no</span><br><span class="line"></span><br><span class="line"># Specify the syslog identity.</span><br><span class="line"># syslog-ident redis</span><br><span class="line"></span><br><span class="line"># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span><br><span class="line"># syslog-facility local0</span><br><span class="line"></span><br><span class="line"># To disable the built in crash log, which will possibly produce cleaner core</span><br><span class="line"># dumps when they are needed, uncomment the following:</span><br><span class="line">#</span><br><span class="line"># crash-log-enabled no</span><br><span class="line"></span><br><span class="line"># To disable the fast memory check that&#x27;s run as part of the crash log, which</span><br><span class="line"># will possibly let redis terminate sooner, uncomment the following:</span><br><span class="line">#</span><br><span class="line"># crash-memcheck-enabled no</span><br><span class="line"></span><br><span class="line"># Set the number of databases. The default database is DB 0, you can select</span><br><span class="line"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span><br><span class="line"># dbid is a number between 0 and &#x27;databases&#x27;-1</span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"># By default Redis shows an ASCII art logo only when started to log to the</span><br><span class="line"># standard output and if the standard output is a TTY and syslog logging is</span><br><span class="line"># disabled. Basically this means that normally a logo is displayed only in</span><br><span class="line"># interactive sessions.</span><br><span class="line">#</span><br><span class="line"># However it is possible to force the pre-4.0 behavior and always show a</span><br><span class="line"># ASCII art logo in startup logs by setting the following option to yes.</span><br><span class="line">always-show-logo no</span><br><span class="line"></span><br><span class="line"># To avoid logging personal identifiable information (PII) into server log file,</span><br><span class="line"># uncomment the following:</span><br><span class="line">#</span><br><span class="line"># hide-user-data-from-log yes</span><br><span class="line"></span><br><span class="line"># By default, Redis modifies the process title (as seen in &#x27;top&#x27; and &#x27;ps&#x27;) to</span><br><span class="line"># provide some runtime information. It is possible to disable this and leave</span><br><span class="line"># the process name as executed by setting the following to no.</span><br><span class="line">set-proc-title yes</span><br><span class="line"></span><br><span class="line"># When changing the process title, Redis uses the following template to construct</span><br><span class="line"># the modified title.</span><br><span class="line">#</span><br><span class="line"># Template variables are specified in curly brackets. The following variables are</span><br><span class="line"># supported:</span><br><span class="line">#</span><br><span class="line"># &#123;title&#125;           Name of process as executed if parent, or type of child process.</span><br><span class="line"># &#123;listen-addr&#125;     Bind address or &#x27;*&#x27; followed by TCP or TLS port listening on, or</span><br><span class="line">#                   Unix socket if only that&#x27;s available.</span><br><span class="line"># &#123;server-mode&#125;     Special mode, i.e. &quot;[sentinel]&quot; or &quot;[cluster]&quot;.</span><br><span class="line"># &#123;port&#125;            TCP port listening on, or 0.</span><br><span class="line"># &#123;tls-port&#125;        TLS port listening on, or 0.</span><br><span class="line"># &#123;unixsocket&#125;      Unix domain socket listening on, or &quot;&quot;.</span><br><span class="line"># &#123;config-file&#125;     Name of configuration file used.</span><br><span class="line">#</span><br><span class="line">proc-title-template &quot;&#123;title&#125; &#123;listen-addr&#125; &#123;server-mode&#125;&quot;</span><br><span class="line"></span><br><span class="line"># Set the local environment which is used for string comparison operations, and </span><br><span class="line"># also affect the performance of Lua scripts. Empty String indicates the locale </span><br><span class="line"># is derived from the environment variables.</span><br><span class="line">locale-collate &quot;&quot;</span><br></pre></td></tr></table></figure><p>rename-command：命令重命名，对于一些危险命令例如：</p><p>​flushdb（清空数据库）</p><p>　flushall（清空所有记录）</p><p>　config（客户端连接后可配置服务器）</p><p>　keys（客户端连接后可查看所有存在的键） </p><p>作为服务端redis-server，常常需要禁用以上命令来使得服务器更加安全。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename-command FLUSHALL &quot;&quot;</span><br></pre></td></tr></table></figure><p>requirepass:设置redis连接密码</p><h4 id="SNAPSHOTTING"><a href="#SNAPSHOTTING" class="headerlink" title="SNAPSHOTTING"></a>SNAPSHOTTING</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">################################ SNAPSHOTTING  ################################</span><br><span class="line"></span><br><span class="line"># Save the DB to disk.</span><br><span class="line">#</span><br><span class="line"># save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]</span><br><span class="line">#</span><br><span class="line"># Redis will save the DB if the given number of seconds elapsed and it</span><br><span class="line"># surpassed the given number of write operations against the DB.</span><br><span class="line">#</span><br><span class="line"># Snapshotting can be completely disabled with a single empty string argument</span><br><span class="line"># as in following example:</span><br><span class="line">#</span><br><span class="line"># save &quot;&quot;</span><br><span class="line">#</span><br><span class="line"># Unless specified otherwise, by default Redis will save the DB:</span><br><span class="line">#   * After 3600 seconds (an hour) if at least 1 change was performed</span><br><span class="line">#   * After 300 seconds (5 minutes) if at least 100 changes were performed</span><br><span class="line">#   * After 60 seconds if at least 10000 changes were performed</span><br><span class="line">#</span><br><span class="line"># You can set these explicitly by uncommenting the following line.</span><br><span class="line">#</span><br><span class="line"># save 3600 1 300 100 60 10000</span><br><span class="line"></span><br><span class="line"># By default Redis will stop accepting writes if RDB snapshots are enabled</span><br><span class="line"># (at least one save point) and the latest background save failed.</span><br><span class="line"># This will make the user aware (in a hard way) that data is not persisting</span><br><span class="line"># on disk properly, otherwise chances are that no one will notice and some</span><br><span class="line"># disaster will happen.</span><br><span class="line">#</span><br><span class="line"># If the background saving process will start working again Redis will</span><br><span class="line"># automatically allow writes again.</span><br><span class="line">#</span><br><span class="line"># However if you have setup your proper monitoring of the Redis server</span><br><span class="line"># and persistence, you may want to disable this feature so that Redis will</span><br><span class="line"># continue to work as usual even if there are problems with disk,</span><br><span class="line"># permissions, and so forth.</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"># Compress string objects using LZF when dump .rdb databases?</span><br><span class="line"># By default compression is enabled as it&#x27;s almost always a win.</span><br><span class="line"># If you want to save some CPU in the saving child set it to &#x27;no&#x27; but</span><br><span class="line"># the dataset will likely be bigger if you have compressible values or keys.</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span><br><span class="line"># This makes the format more resistant to corruption but there is a performance</span><br><span class="line"># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span><br><span class="line"># for maximum performances.</span><br><span class="line">#</span><br><span class="line"># RDB files created with checksum disabled have a checksum of zero that will</span><br><span class="line"># tell the loading code to skip the check.</span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"># Enables or disables full sanitization checks for ziplist and listpack etc when</span><br><span class="line"># loading an RDB or RESTORE payload. This reduces the chances of a assertion or</span><br><span class="line"># crash later on while processing commands.</span><br><span class="line"># Options:</span><br><span class="line">#   no         - Never perform full sanitization</span><br><span class="line">#   yes        - Always perform full sanitization</span><br><span class="line">#   clients    - Perform full sanitization only for user connections.</span><br><span class="line">#                Excludes: RDB files, RESTORE commands received from the master</span><br><span class="line">#                connection, and client connections which have the</span><br><span class="line">#                skip-sanitize-payload ACL flag.</span><br><span class="line"># The default should be &#x27;clients&#x27; but since it currently affects cluster</span><br><span class="line"># resharding via MIGRATE, it is temporarily set to &#x27;no&#x27; by default.</span><br><span class="line">#</span><br><span class="line"># sanitize-dump-payload no</span><br><span class="line"></span><br><span class="line"># The filename where to dump the DB</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># Remove RDB files used by replication in instances without persistence</span><br><span class="line"># enabled. By default this option is disabled, however there are environments</span><br><span class="line"># where for regulations or other security concerns, RDB files persisted on</span><br><span class="line"># disk by masters in order to feed replicas, or stored on disk by replicas</span><br><span class="line"># in order to load them for the initial synchronization, should be deleted</span><br><span class="line"># ASAP. Note that this option ONLY WORKS in instances that have both AOF</span><br><span class="line"># and RDB persistence disabled, otherwise is completely ignored.</span><br><span class="line">#</span><br><span class="line"># An alternative (and sometimes better) way to obtain the same effect is</span><br><span class="line"># to use diskless replication on both master and replicas instances. However</span><br><span class="line"># in the case of replicas, diskless is not always an option.</span><br><span class="line">rdb-del-sync-files no</span><br><span class="line"></span><br><span class="line"># The working directory.</span><br><span class="line">#</span><br><span class="line"># The DB will be written inside this directory, with the filename specified</span><br><span class="line"># above using the &#x27;dbfilename&#x27; configuration directive.</span><br><span class="line">#</span><br><span class="line"># The Append Only File will also be created inside this directory.</span><br><span class="line">#</span><br><span class="line"># Note that you must specify a directory here, not a file name.</span><br><span class="line">dir ./</span><br></pre></td></tr></table></figure><p>持久化RDB设置，控制 Redis 数据快照的保存时机、格式、完整性及存储位置。</p><h4 id="REDIS-CLUSTER"><a href="#REDIS-CLUSTER" class="headerlink" title="REDIS CLUSTER"></a>REDIS CLUSTER</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line">################################ REDIS CLUSTER  ###############################</span><br><span class="line"></span><br><span class="line"># Normal Redis instances can&#x27;t be part of a Redis Cluster; only nodes that are</span><br><span class="line"># started as cluster nodes can. In order to start a Redis instance as a</span><br><span class="line"># cluster node enable the cluster support uncommenting the following:</span><br><span class="line">#</span><br><span class="line"># cluster-enabled yes</span><br><span class="line"></span><br><span class="line"># Every cluster node has a cluster configuration file. This file is not</span><br><span class="line"># intended to be edited by hand. It is created and updated by Redis nodes.</span><br><span class="line"># Every Redis Cluster node requires a different cluster configuration file.</span><br><span class="line"># Make sure that instances running in the same system do not have</span><br><span class="line"># overlapping cluster configuration file names.</span><br><span class="line">#</span><br><span class="line"># cluster-config-file nodes-6379.conf</span><br><span class="line"></span><br><span class="line"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span><br><span class="line"># for it to be considered in failure state.</span><br><span class="line"># Most other internal time limits are a multiple of the node timeout.</span><br><span class="line">#</span><br><span class="line"># cluster-node-timeout 15000</span><br><span class="line"></span><br><span class="line"># The cluster port is the port that the cluster bus will listen for inbound connections on. When set </span><br><span class="line"># to the default value, 0, it will be bound to the command port + 10000. Setting this value requires </span><br><span class="line"># you to specify the cluster bus port when executing cluster meet.</span><br><span class="line"># cluster-port 0</span><br><span class="line"></span><br><span class="line"># A replica of a failing master will avoid to start a failover if its data</span><br><span class="line"># looks too old.</span><br><span class="line">#</span><br><span class="line"># There is no simple way for a replica to actually have an exact measure of</span><br><span class="line"># its &quot;data age&quot;, so the following two checks are performed:</span><br><span class="line">#</span><br><span class="line"># 1) If there are multiple replicas able to failover, they exchange messages</span><br><span class="line">#    in order to try to give an advantage to the replica with the best</span><br><span class="line">#    replication offset (more data from the master processed).</span><br><span class="line">#    Replicas will try to get their rank by offset, and apply to the start</span><br><span class="line">#    of the failover a delay proportional to their rank.</span><br><span class="line">#</span><br><span class="line"># 2) Every single replica computes the time of the last interaction with</span><br><span class="line">#    its master. This can be the last ping or command received (if the master</span><br><span class="line">#    is still in the &quot;connected&quot; state), or the time that elapsed since the</span><br><span class="line">#    disconnection with the master (if the replication link is currently down).</span><br><span class="line">#    If the last interaction is too old, the replica will not try to failover</span><br><span class="line">#    at all.</span><br><span class="line">#</span><br><span class="line"># The point &quot;2&quot; can be tuned by user. Specifically a replica will not perform</span><br><span class="line"># the failover if, since the last interaction with the master, the time</span><br><span class="line"># elapsed is greater than:</span><br><span class="line">#</span><br><span class="line">#   (node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period</span><br><span class="line">#</span><br><span class="line"># So for example if node-timeout is 30 seconds, and the cluster-replica-validity-factor</span><br><span class="line"># is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span><br><span class="line"># replica will not try to failover if it was not able to talk with the master</span><br><span class="line"># for longer than 310 seconds.</span><br><span class="line">#</span><br><span class="line"># A large cluster-replica-validity-factor may allow replicas with too old data to failover</span><br><span class="line"># a master, while a too small value may prevent the cluster from being able to</span><br><span class="line"># elect a replica at all.</span><br><span class="line">#</span><br><span class="line"># For maximum availability, it is possible to set the cluster-replica-validity-factor</span><br><span class="line"># to a value of 0, which means, that replicas will always try to failover the</span><br><span class="line"># master regardless of the last time they interacted with the master.</span><br><span class="line"># (However they&#x27;ll always try to apply a delay proportional to their</span><br><span class="line"># offset rank).</span><br><span class="line">#</span><br><span class="line"># Zero is the only value able to guarantee that when all the partitions heal</span><br><span class="line"># the cluster will always be able to continue.</span><br><span class="line">#</span><br><span class="line"># cluster-replica-validity-factor 10</span><br><span class="line"></span><br><span class="line"># Cluster replicas are able to migrate to orphaned masters, that are masters</span><br><span class="line"># that are left without working replicas. This improves the cluster ability</span><br><span class="line"># to resist to failures as otherwise an orphaned master can&#x27;t be failed over</span><br><span class="line"># in case of failure if it has no working replicas.</span><br><span class="line">#</span><br><span class="line"># Replicas migrate to orphaned masters only if there are still at least a</span><br><span class="line"># given number of other working replicas for their old master. This number</span><br><span class="line"># is the &quot;migration barrier&quot;. A migration barrier of 1 means that a replica</span><br><span class="line"># will migrate only if there is at least 1 other working replica for its master</span><br><span class="line"># and so forth. It usually reflects the number of replicas you want for every</span><br><span class="line"># master in your cluster.</span><br><span class="line">#</span><br><span class="line"># Default is 1 (replicas migrate only if their masters remain with at least</span><br><span class="line"># one replica). To disable migration just set it to a very large value or</span><br><span class="line"># set cluster-allow-replica-migration to &#x27;no&#x27;.</span><br><span class="line"># A value of 0 can be set but is useful only for debugging and dangerous</span><br><span class="line"># in production.</span><br><span class="line">#</span><br><span class="line"># cluster-migration-barrier 1</span><br><span class="line"></span><br><span class="line"># Turning off this option allows to use less automatic cluster configuration.</span><br><span class="line"># It both disables migration to orphaned masters and migration from masters</span><br><span class="line"># that became empty.</span><br><span class="line">#</span><br><span class="line"># Default is &#x27;yes&#x27; (allow automatic migrations).</span><br><span class="line">#</span><br><span class="line"># cluster-allow-replica-migration yes</span><br><span class="line"></span><br><span class="line"># By default Redis Cluster nodes stop accepting queries if they detect there</span><br><span class="line"># is at least a hash slot uncovered (no available node is serving it).</span><br><span class="line"># This way if the cluster is partially down (for example a range of hash slots</span><br><span class="line"># are no longer covered) all the cluster becomes, eventually, unavailable.</span><br><span class="line"># It automatically returns available as soon as all the slots are covered again.</span><br><span class="line">#</span><br><span class="line"># However sometimes you want the subset of the cluster which is working,</span><br><span class="line"># to continue to accept queries for the part of the key space that is still</span><br><span class="line"># covered. In order to do so, just set the cluster-require-full-coverage</span><br><span class="line"># option to no.</span><br><span class="line">#</span><br><span class="line"># cluster-require-full-coverage yes</span><br><span class="line"></span><br><span class="line"># This option, when set to yes, prevents replicas from trying to failover its</span><br><span class="line"># master during master failures. However the replica can still perform a</span><br><span class="line"># manual failover, if forced to do so.</span><br><span class="line">#</span><br><span class="line"># This is useful in different scenarios, especially in the case of multiple</span><br><span class="line"># data center operations, where we want one side to never be promoted if not</span><br><span class="line"># in the case of a total DC failure.</span><br><span class="line">#</span><br><span class="line"># cluster-replica-no-failover no</span><br><span class="line"></span><br><span class="line"># This option, when set to yes, allows nodes to serve read traffic while the</span><br><span class="line"># cluster is in a down state, as long as it believes it owns the slots.</span><br><span class="line">#</span><br><span class="line"># This is useful for two cases.  The first case is for when an application</span><br><span class="line"># doesn&#x27;t require consistency of data during node failures or network partitions.</span><br><span class="line"># One example of this is a cache, where as long as the node has the data it</span><br><span class="line"># should be able to serve it.</span><br><span class="line">#</span><br><span class="line"># The second use case is for configurations that don&#x27;t meet the recommended</span><br><span class="line"># three shards but want to enable cluster mode and scale later. A</span><br><span class="line"># master outage in a 1 or 2 shard configuration causes a read/write outage to the</span><br><span class="line"># entire cluster without this option set, with it set there is only a write outage.</span><br><span class="line"># Without a quorum of masters, slot ownership will not change automatically.</span><br><span class="line">#</span><br><span class="line"># cluster-allow-reads-when-down no</span><br><span class="line"></span><br><span class="line"># This option, when set to yes, allows nodes to serve pubsub shard traffic while</span><br><span class="line"># the cluster is in a down state, as long as it believes it owns the slots.</span><br><span class="line">#</span><br><span class="line"># This is useful if the application would like to use the pubsub feature even when</span><br><span class="line"># the cluster global stable state is not OK. If the application wants to make sure only</span><br><span class="line"># one shard is serving a given channel, this feature should be kept as yes.</span><br><span class="line">#</span><br><span class="line"># cluster-allow-pubsubshard-when-down yes</span><br><span class="line"></span><br><span class="line"># Cluster link send buffer limit is the limit on the memory usage of an individual</span><br><span class="line"># cluster bus link&#x27;s send buffer in bytes. Cluster links would be freed if they exceed</span><br><span class="line"># this limit. This is to primarily prevent send buffers from growing unbounded on links</span><br><span class="line"># toward slow peers (E.g. PubSub messages being piled up).</span><br><span class="line"># This limit is disabled by default. Enable this limit when &#x27;mem_cluster_links&#x27; INFO field</span><br><span class="line"># and/or &#x27;send-buffer-allocated&#x27; entries in the &#x27;CLUSTER LINKS` command output continuously increase.</span><br><span class="line"># Minimum limit of 1gb is recommended so that cluster link buffer can fit in at least a single</span><br><span class="line"># PubSub message by default. (client-query-buffer-limit default value is 1gb)</span><br><span class="line">#</span><br><span class="line"># cluster-link-sendbuf-limit 0</span><br><span class="line"> </span><br><span class="line"># Clusters can configure their announced hostname using this config. This is a common use case for </span><br><span class="line"># applications that need to use TLS Server Name Indication (SNI) or dealing with DNS based</span><br><span class="line"># routing. By default this value is only shown as additional metadata in the CLUSTER SLOTS</span><br><span class="line"># command, but can be changed using &#x27;cluster-preferred-endpoint-type&#x27; config. This value is </span><br><span class="line"># communicated along the clusterbus to all nodes, setting it to an empty string will remove </span><br><span class="line"># the hostname and also propagate the removal.</span><br><span class="line">#</span><br><span class="line"># cluster-announce-hostname &quot;&quot;</span><br><span class="line"></span><br><span class="line"># Clusters can configure an optional nodename to be used in addition to the node ID for</span><br><span class="line"># debugging and admin information. This name is broadcasted between nodes, so will be used</span><br><span class="line"># in addition to the node ID when reporting cross node events such as node failures.</span><br><span class="line"># cluster-announce-human-nodename &quot;&quot;</span><br><span class="line"></span><br><span class="line"># Clusters can advertise how clients should connect to them using either their IP address,</span><br><span class="line"># a user defined hostname, or by declaring they have no endpoint. Which endpoint is</span><br><span class="line"># shown as the preferred endpoint is set by using the cluster-preferred-endpoint-type</span><br><span class="line"># config with values &#x27;ip&#x27;, &#x27;hostname&#x27;, or &#x27;unknown-endpoint&#x27;. This value controls how</span><br><span class="line"># the endpoint returned for MOVED/ASKING requests as well as the first field of CLUSTER SLOTS. </span><br><span class="line"># If the preferred endpoint type is set to hostname, but no announced hostname is set, a &#x27;?&#x27; </span><br><span class="line"># will be returned instead.</span><br><span class="line">#</span><br><span class="line"># When a cluster advertises itself as having an unknown endpoint, it&#x27;s indicating that</span><br><span class="line"># the server doesn&#x27;t know how clients can reach the cluster. This can happen in certain </span><br><span class="line"># networking situations where there are multiple possible routes to the node, and the </span><br><span class="line"># server doesn&#x27;t know which one the client took. In this case, the server is expecting</span><br><span class="line"># the client to reach out on the same endpoint it used for making the last request, but use</span><br><span class="line"># the port provided in the response.</span><br><span class="line">#</span><br><span class="line"># cluster-preferred-endpoint-type ip</span><br><span class="line"></span><br><span class="line"># This configuration defines the sampling ratio (0-100) for checking command</span><br><span class="line"># compatibility in cluster mode. When a command is executed, it is sampled at</span><br><span class="line"># the specified ratio to determine if it complies with Redis cluster constraints,</span><br><span class="line"># such as cross-slot restrictions.</span><br><span class="line">#</span><br><span class="line"># - A value of 0 means no commands are sampled for compatibility checks.</span><br><span class="line"># - A value of 100 means all commands are checked.</span><br><span class="line"># - Intermediate values (e.g., 10) mean that approximately 10% of the commands</span><br><span class="line">#   are randomly selected for compatibility verification.</span><br><span class="line">#</span><br><span class="line"># Higher sampling ratios may introduce additional performance overhead, especially</span><br><span class="line"># under high QPS. The default value is 0 (no sampling).</span><br><span class="line">#</span><br><span class="line"># cluster-compatibility-sample-ratio 0</span><br><span class="line"></span><br><span class="line"># In order to setup your cluster make sure to read the documentation</span><br><span class="line"># available at https://redis.io web site.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段配置是 Redis 的集群（Cluster）模式设置，用于构建一个分布式 Redis 集群，实现数据分片、高可用和自动故障转移。以下是关键配置项的简要说明：</p><p>cluster-enabled yes：启用集群模式。<br>cluster-config-file nodes-6379.conf：集群节点的配置文件，由 Redis 自动生成管理。<br>cluster-node-timeout 15000：节点不可达多少毫秒后认为该节点失败。</p><p>cluster-replica-validity-factor 10：控制从节点是否可以发起故障转移，值越大越宽松。<br>cluster-migration-barrier 1：主节点至少保留几个从节点后，才允许迁移去填补孤儿主节点。<br>cluster-allow-replica-migration yes：是否允许从节点自动迁移到孤儿主节点。</p><p>cluster-require-full-coverage yes：如果部分哈希槽未覆盖，是否停止接受请求。<br>cluster-replica-no-failover no：是否禁止从节点在主节点故障时自动故障转移。<br>cluster-allow-reads-when-down no：集群部分宕机时，是否允许读操作。<br>cluster-allow-pubsubshard-when-down no：是否允许在集群异常时继续使用 Pub&#x2F;Sub 分片功能。</p><p>cluster-port 0：集群总线监听端口，默认为命令端口 + 10000。<br>cluster-announce-hostname “”：对外宣布的主机名（如用于 TLS&#x2F;SNI）。<br>cluster-announce-human-nodename “”：节点可读名称，方便管理和调试。<br>cluster-preferred-endpoint-type ip：客户端连接使用的地址类型（ip &#x2F; hostname &#x2F; unknown）。</p><p>cluster-link-sendbuf-limit 0：限制集群节点间发送缓冲区大小，防止内存溢出。<br>cluster-command-check-ratio 0：检查命令兼容性的采样比例，用于控制跨槽命令行为。</p><p>这段配置用于启用并定制 Redis 集群模式，控制节点通信、故障转移、可用性策略及客户端连接方式，实现 Redis 数据的分布式存储与高可用。</p><p>用于启用并定制 Redis 集群模式，控制节点通信、故障转移、可用性策略及客户端连接方式，实现 Redis 数据的分布式存储与高可用。</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的安装</title>
      <link href="/2025/05/15/redis%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2025/05/15/redis%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="安装直链（v8-0-1-最新版本）"><a href="#安装直链（v8-0-1-最新版本）" class="headerlink" title="安装直链（v8.0.1-最新版本）"></a>安装直链（v8.0.1-最新版本）</h1><p>于昨日更新最新版本</p><p>windows开箱即用：</p><p><a href="https://github.com/redis-windows/redis-windows/releases/download/8.0.1/Redis-8.0.1-Windows-x64-cygwin-with-Service.zip">https://github.com/redis-windows/redis-windows/releases/download/8.0.1/Redis-8.0.1-Windows-x64-cygwin-with-Service.zip</a></p><p><a href="https://github.com/redis-windows/redis-windows/releases/download/8.0.1/Redis-8.0.1-Windows-x64-msys2-with-Service.zip">https://github.com/redis-windows/redis-windows/releases/download/8.0.1/Redis-8.0.1-Windows-x64-msys2-with-Service.zip</a></p><p>linux直接下载安装指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-8.0.1.tar.gz</span><br></pre></td></tr></table></figure><p>linux安装包直链：</p><p><a href="https://download.redis.io/releases/redis-8.0.1.tar.gz">https://download.redis.io/releases/redis-8.0.1.tar.gz</a></p><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>Redis其实并不是直接支持Windows的，不过可以通过wsl运行，推荐使用unbuntu，但仍要在windows下使用则可以在该链接进行下载</p><h5 id="官方的redis-8-0动态"><a href="#官方的redis-8-0动态" class="headerlink" title="官方的redis 8.0动态"></a>官方的redis 8.0动态</h5><ul><li><p>支持过期时间的哈希类型</p><ul><li><code>HGETDEL</code> – 获取并删除哈希字段</li><li><code>HGETEX</code>, <code>HSETEX</code> – 获取&#x2F;设置带过期时间的哈希字段</li></ul></li><li><p>字段 TTL 和过期时间 (7.4+)</p><ul><li><code>HEXPIRE</code>, <code>HPEXPIRE</code>, <code>HEXPIREAT</code>, <code>HPEXPIREAT</code></li><li><code>HPERSIST</code>, <code>HEXPIRETIME</code>, <code>HPEXPIRETIME</code>, <code>HTTL</code>, <code>HPTTL</code></li></ul></li><li><p>其他新增命令</p><ul><li><code>XREAD +</code> – 读取最新的流条目</li><li><code>HSCAN NOVALUES</code> – 仅扫描哈希字段名称</li><li>集群模式下的 <code>SORT</code> 命令支持 <code>BY</code> 和 <code>GET</code></li><li><code>CLIENT KILL MAXAGE</code></li><li>Lua: <code>os.clock()</code> 现已可用</li><li>副本上的 <code>MULTI/EXEC</code> 事务中支持 <code>SPUBLISH</code></li><li><a href="https://redis.ac.cn/docs/latest/commands/">向量集命令组（预览版）</a></li></ul></li><li><p>支持的操作系统</p><ul><li>Ubuntu 20.04 &#x2F; 22.04 &#x2F; 24.04</li><li>Debian 11 &#x2F; 12</li><li>macOS 13–15</li><li>Rocky&#x2F;Alma Linux 8.10 &#x2F; 9.5</li></ul></li></ul><h2 id="在windows使用Redis"><a href="#在windows使用Redis" class="headerlink" title="在windows使用Redis"></a>在windows使用Redis</h2><p>在之前的直链中选择一个下载即可</p><p>下载后选择一个合适的文件路径解压</p><p>双击start.bat启动服务端，双击redis-cil.exe启动命令客户端</p><p>使用navicat，选择redis进行本地的配置与链接<img src="https://img.picui.cn/free/2025/05/15/6825d906ee950.png" alt="image-20250515195527791"></p><h2 id="在linux使用redis"><a href="#在linux使用redis" class="headerlink" title="在linux使用redis"></a>在linux使用redis</h2><p>查看该系统有没有安装redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep redis</span><br></pre></td></tr></table></figure><p>若什么都没有出现则没有安装</p><p><img src="https://img.picui.cn/free/2025/05/15/6825d9072627a.png" alt="image-20250515163224192"></p><p>安装到当前目录（建议换一个熟悉的目录）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-8.0.1.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf redis-8.0.1.tar.gz</span><br></pre></td></tr></table></figure><p>进入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd redis-8.0.1</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/05/15/6825d907a82a1.png" alt="image-20250515184515080"></p><p>稍微等待</p><p>出现下面的页面就安装成功了，安装在&#x2F;usr&#x2F;local&#x2F;bin&#x2F;</p><p><img src="https://img.picui.cn/free/2025/05/15/6825d907c8401.png" alt="image-20250515185148147"></p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>查看文件结构</p><p><img src="https://img.picui.cn/free/2025/05/15/6825d907e2876.png" alt="image-20250515191857807"></p><p>之后复制配置文件进行备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir myredis-config</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /root/redis-8.0.1/redis.conf myredis-config</span><br></pre></td></tr></table></figure><p>回到安装目录  &#x2F;root&#x2F;redis-8.0.1&#x2F;redis.conf，使用finalshell进行编辑</p><p>或者使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim  /root/redis-8.0.1/redis.conf</span><br></pre></td></tr></table></figure><p>来进行编辑，找到图示区域将 daemonize no 修改为 yes 来启动后台自启动</p><p><img src="https://img.picui.cn/free/2025/05/15/6825d9798132b.png" alt="image-20250515192458199"></p><p>点击 i 进入编辑，编辑完成后输入:wq 保存并退出</p><p><img src="https://img.picui.cn/free/2025/05/15/6825d9797e484.png" alt="image-20250515193103406"></p><p>若开启远程链接，请将 bind 127.0.0.1更换成你的服务器地址或注释掉，之后配置防火墙放行</p><p>查看redis进程状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure><p>回到 &#x2F;usr&#x2F;local&#x2F;bin 启动redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server myredis-config/redis.conf</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/05/15/6825d97e7b134.png" alt="image-20250515193854815"></p><p>ctrl+Z退出界面，使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379</span><br></pre></td></tr></table></figure><p>打开命令行，之后执行与windows版本一致</p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown</span><br></pre></td></tr></table></figure><p>停止服务</p><p>远程链接时记得放行防火墙端口</p><p>使用navicat进行链接，效果如下</p><p><img src="https://img.picui.cn/free/2025/05/15/6825d977f1a89.png" alt="image-20250515194415577"></p><p>安装完成</p>]]></content>
      
      
      <categories>
          
          <category> 实操手册 </category>
          
          <category> 基础知识 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常见报错-Windows</title>
      <link href="/2025/05/13/Docker%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2025/05/13/Docker%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="一-WSL-integration-with-distro-‘Ubuntu’-unexpectedly-stopped-DO-you-want-to-restart-it"><a href="#一-WSL-integration-with-distro-‘Ubuntu’-unexpectedly-stopped-DO-you-want-to-restart-it" class="headerlink" title="一   WSL integration with distro ‘Ubuntu’ unexpectedly stopped. DO you want to restart it?"></a>一   WSL integration with distro ‘Ubuntu’ unexpectedly stopped. DO you want to restart it?</h2><p><img src="https://broadscope-dialogue-new.oss-cn-beijing.aliyuncs.com/upload/20250511/1e39d592ec8c654ded4747df9dfa69f4/b9e1d6d44c9c41f2ba91066479d140dd/image.png?Expires=1810041596&OSSAccessKeyId=LTAI5tL97mBYzVcjkG1cUyin&Signature=u/9vI9StMtWbqOEUr1DvIX5KNlw=" alt="img"></p><p>此状况表明 Docker Desktop 与 Ubuntu WSL 发行版之间的集成出现了问题。</p><ul><li><p>点击弹窗中的 <strong>Restart the WSL integration</strong> 按钮，让 Docker Desktop 重新尝试与 WSL2 中的 Ubuntu 进行连接。</p></li><li><p>使用CMD或者Powershell运行此指令来重启WSL2，稍后重启docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure></li><li><p>还出现此状况，请更新WSL（1行）与Ubuntu（2行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --update</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure></li><li><p>仍然无法解决，请重装或重置docker</p><p>删除以下目录（备份重要数据）：<code>%USERPROFILE%\.docker\</code></p><h2 id="二-Docker-Desktop-encountered-an-unexpected-error-and-needs-to-close"><a href="#二-Docker-Desktop-encountered-an-unexpected-error-and-needs-to-close" class="headerlink" title="二  Docker Desktop encountered an unexpected error and needs to close."></a>二  Docker Desktop encountered an unexpected error and needs to close.</h2></li></ul><p><img src="https://broadscope-dialogue-new.oss-cn-beijing.aliyuncs.com/upload/20250511/1e39d592ec8c654ded4747df9dfa69f4/e0d138e5ffe946bdbd899f26ce177e5d/image.png?Expires=1810041873&OSSAccessKeyId=LTAI5tL97mBYzVcjkG1cUyin&Signature=kZzu3LpwaRZCzU8JUOPGuExadGM=" alt="img"></p><p>表明 Docker Desktop 在启动时无法及时与 Docker 引擎（Docker API）通信，导致超时并关闭.</p><ul><li><p>首先确认WSL正确启动</p></li><li><p>若可以则使用下方指令来停止wsl，之后重启Docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure></li><li><p>之后设置国内镜像源，先前文章有提及，可以在mirrors中括号内添加你想要的镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;builder&quot;: &#123;</span><br><span class="line">    &quot;gc&quot;: &#123;</span><br><span class="line">      &quot;defaultKeepStorage&quot;: &quot;20GB&quot;,</span><br><span class="line">      &quot;enabled&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;experimental&quot;: false,</span><br><span class="line">      &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">        &quot;https://dockerproxy.com&quot;,</span><br><span class="line">        &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">        &quot;https://docker.nju.edu.cn&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关闭手动代理</p><p><img src="https://img.picui.cn/free/2025/05/13/68234a51ce5fb.png" alt="image-20250513204652631"></p></li><li><p>重新启动</p></li></ul><h2 id="三-An-unexpected-error-occurred-while-executing-a-WSL-command"><a href="#三-An-unexpected-error-occurred-while-executing-a-WSL-command" class="headerlink" title="三  An unexpected error occurred while executing a WSL command."></a>三  An unexpected error occurred while executing a WSL command.</h2><p><img src="https://broadscope-dialogue-new.oss-cn-beijing.aliyuncs.com/upload/20250513/1e39d592ec8c654ded4747df9dfa69f4/50960e63f8f24c00a6d025c34ded57a0/image.png?Expires=1810212671&OSSAccessKeyId=LTAI5tL97mBYzVcjkG1cUyin&Signature=5KRsRnz8FdP5rg0kDu5TFGa7LXI=" alt="img"></p><ul><li><p>使用CMD或者Powershell运行此指令来重启WSL2，稍后重启你的电脑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure></li><li><p>或者在文件管理器搜索 docker_data.vhd 右键、属性、点击共享再分发给用户就行</p></li></ul><p>还有相关的问题网络上已有相似帖子，请按照报错查找。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx的tcp-udp代理</title>
      <link href="/2025/05/09/Nginx%E7%9A%84tcp-udp%E4%BB%A3%E7%90%86/"/>
      <url>/2025/05/09/Nginx%E7%9A%84tcp-udp%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx的Tcp代理"><a href="#Nginx的Tcp代理" class="headerlink" title="Nginx的Tcp代理"></a>Nginx的Tcp代理</h3><h4 id="首先了解一下什么是Tcp与Udp"><a href="#首先了解一下什么是Tcp与Udp" class="headerlink" title="首先了解一下什么是Tcp与Udp"></a>首先了解一下什么是Tcp与Udp</h4><h5 id="Tcp"><a href="#Tcp" class="headerlink" title="Tcp"></a>Tcp</h5><ul><li><strong>连接导向</strong>：TCP是一种面向连接的协议，这意味着在数据传输之前，必须先建立连接。这个过程通常被称为“三次握手”。</li><li><strong>可靠性</strong>：TCP提供可靠的数据传输服务。它确保所有发送的数据包都能按序无误地到达接收方。如果数据包丢失或损坏，TCP会自动重传这些数据包。</li><li><strong>流量控制与拥塞控制</strong>：TCP具有内置的机制来控制数据流速，避免网络过载，并且能够动态调整发送速率以适应网络状况。</li><li><strong>应用场景</strong>：由于其高可靠性，TCP常用于需要保证数据完整性的应用，如文件传输（FTP）、电子邮件（SMTP、IMAP、POP3）、万维网浏览（HTTP、HTTPS）等。</li></ul><h5 id="Udp"><a href="#Udp" class="headerlink" title="Udp"></a>Udp</h5><ul><li><strong>无连接</strong>：UDP是一种无连接的协议，不需要提前建立连接就可以直接发送数据。这种方式使得UDP比TCP更加高效快捷。</li><li><strong>不可靠性</strong>：UDP不保证数据包能够成功到达目的地，也不保证数据包的顺序。因此，使用UDP的应用程序需要自己处理丢失或乱序的数据包。</li><li><strong>低开销</strong>：由于没有连接建立的过程以及简化的头部信息，UDP的额外开销比TCP小得多。</li><li><strong>应用场景</strong>：UDP适用于对实时性要求较高而对少量丢包容忍度较高的应用，如语音通话、视频会议、在线游戏等。</li></ul><p>在二者的应用场景中可以看出Tcp用的较多，而Ngnix在后期也开始支持Tcp与Udp代理了</p><h4 id="在Nginx中实现TCP代理功能"><a href="#在Nginx中实现TCP代理功能" class="headerlink" title="在Nginx中实现TCP代理功能"></a>在Nginx中实现TCP代理功能</h4><p>通常需要使用到Nginx Plus或者编译Nginx时包含<code>--with-stream</code>配置选项来启用stream模块（从Nginx 1.9.0版本开始引入）。这个模块允许Nginx作为TCP或UDP的代理服务器。</p><p>幸运的是现版本已经到1.26.x了，只需编辑编辑<code>nginx.conf</code>文件、在<code>http</code>块之外添加一个<code>stream</code>块来配置TCP代理服务就行了。</p><h5 id="简单的案例"><a href="#简单的案例" class="headerlink" title="简单的案例"></a>简单的案例</h5><p>现在你想要将流量从Nginx代理到后端的一个MySQL数据库服务器（默认端口3306），</p><p>在之前的文章《Nginx的初步了解》中就有了对其的简单介绍，简单修改下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream backend_mysql &#123;</span><br><span class="line">        # 后端MySQL服务器地址，可以修改</span><br><span class="line">        server 192.168.1.100:3306;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 3306;  # 监听的端口</span><br><span class="line">        proxy_pass backend_mysql;  # 指定上游服务器组</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整配置文件，其中修改服务器地址就行了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Nginx进程数，建议设置为CPU核心数</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line"># 错误日志路径以及日志级别</span><br><span class="line">error_log  C:/nginx/logs/error.log warn;</span><br><span class="line">pid        C:/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"># events块，定义了Nginx如何处理连接</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  8192;  # 每个进程的最大连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># TCP/UDP代理服务相关配置</span><br><span class="line">stream &#123;</span><br><span class="line">    upstream backend_mysql &#123;</span><br><span class="line">        # 后端MySQL服务器地址</span><br><span class="line">        server 你的服务器地址:3306;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 3306;  # 监听的端口</span><br><span class="line">        proxy_pass backend_mysql;  # 指定上游服务器组</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现权限不足无法创建日志文件的时候可以用管理员权限运行nginx就行了</p><p>现在在NaviCat来链接，操作如图：</p><p><img src="https://s21.ax1x.com/2025/05/09/pEOuXp8.png" alt="image-20250509193502152"></p><p><img src="https://s21.ax1x.com/2025/05/09/pEOuv6g.png"></p><p><img src="https://s21.ax1x.com/2025/05/09/pEOKVcF.png"></p><p>当然，偶尔会出现链接失败的场景，这时候根据服务器的内存、CPU核心数量来调整进程最大的连接数，如果出现了别的问题，可以查看C:&#x2F;nginx&#x2F;logs&#x2F;error.log的错误日志进行判断与修复。</p><p>还有注意不要轻易泄露服务器地址。。。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
          <category> 实操手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基础知识</title>
      <link href="/2025/05/07/redis%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/05/07/redis%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是redis？"><a href="#什么是redis？" class="headerlink" title="什么是redis？"></a>什么是redis？</h3><p>  Redis:REmote DIctionary Server(远程字典服务)。由意大利人Salvatore Sanfilippo开发。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>内存高速缓存</li><li>key&#x2F;value分布式内存数据库</li><li>支持持久化</li><li>NoSQL</li><li>C语言编写</li><li>开源免费</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>缓存系统（“热点”数据：高频读、低频写）、计数器、消息队列系统、排行榜、社交网络和实时系统。</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>分5个自有类型与一种自定义类型，自有类型包括</p><ul><li>String类</li><li>哈希类</li><li>列表类</li><li>集合类</li><li>顺序集合类</li></ul><h5 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h5><p>以二进制安全字符串组成，换句话说它理论可以存储一切二进制字符组成的文件，包括但不限于音视频、字符串、图片等，最高支持到512M。</p><p>可以使用这些操作指令进行：</p><ul><li>GET&#x2F;MGET</li><li>SET&#x2F;SETEX&#x2F;MSET&#x2F;MSETNX</li><li>INCR&#x2F;DECR</li><li>GETSET</li><li>DEL</li></ul><h5 id="哈希类"><a href="#哈希类" class="headerlink" title="哈希类"></a>哈希类</h5><p>由两个字符串类型的字段（field）与值（value）组成的键值对集合（map），其中字段是唯一的，一个哈希类的键包含一或多个字段，一个字段关联一个值。常常使用哈希来存储用户的信息，包含但不限于用户名、密码、电子邮件、手机号等。</p><p>可以使用这些操作指令进行：</p><ul><li>HGET&#x2F;HMGET&#x2F;HGETALL</li><li>HSET&#x2F;HMSET&#x2F;HSETNX</li><li>HEXISTS&#x2F;HLEN</li><li>HKEYS&#x2F;HDEL</li><li>HVALS</li></ul><h5 id="列表类-LIST"><a href="#列表类-LIST" class="headerlink" title="列表类 LIST"></a>列表类 LIST</h5><p>插入拍戏的字符串元素集合，多用双链表实现。</p><p>可以使用这些操作指令进行：</p><ul><li>LPUSH&#x2F;LPUSHX&#x2F;LPOP&#x2F;RPUSH&#x2F;RPUSHX&#x2F;RPOP&#x2F;LINSERT&#x2F;LSET</li><li>LINDEX&#x2F;LRANGE</li><li>LLEN&#x2F;LTRIM</li></ul><h5 id="集合类-SET"><a href="#集合类-SET" class="headerlink" title="集合类 SET"></a>集合类 SET</h5><p>无顺序集合，与列表类区别是：集合中元素无序且唯一，用哈希表实现。多用于交集、并集的计算，在找共同兴趣、好友、共同关注上引用。</p><p>可以使用这些操作指令进行：</p><ul><li>SADD&#x2F;SPOP&#x2F;SMOVE&#x2F;SCARD</li><li>SINTER&#x2F;SDIFF&#x2F;SDIFFSTORE&#x2F;SUNION</li></ul><h5 id="顺序集合类"><a href="#顺序集合类" class="headerlink" title="顺序集合类"></a>顺序集合类</h5><p>有序的集合类型，每个元素管理一个double类权值，从小到大排序，与set差不多。</p><h4 id="数据结构多样"><a href="#数据结构多样" class="headerlink" title="数据结构多样"></a>数据结构多样</h4><p><img src="https://s21.ax1x.com/2025/05/07/pELuIKJ.png"></p><p>其中压缩列表是列表键和哈希键的底层实现之一，整数集合是集合键的底层实现之一。</p><h4 id="内存存储持续化"><a href="#内存存储持续化" class="headerlink" title="内存存储持续化"></a>内存存储持续化</h4><p>所有数据默认保存在内存中，保证了极高的读写速度。有两个持久化选项</p><ul><li><strong>RDB（快照）</strong>：定期将内存中的数据集以二进制形式快照保存到磁盘上。</li><li><strong>AOF（追加文件）</strong>：记录服务器接收到的每一个写操作命令，在重启时重放这些命令恢复数据。</li></ul><h4 id="高可用性与扩展性"><a href="#高可用性与扩展性" class="headerlink" title="高可用性与扩展性"></a>高可用性与扩展性</h4><ul><li><strong>主从复制</strong>：实现数据冗余和读写分离，提高系统的可用性和读取性能。</li><li><strong>哨兵（Sentinel）机制</strong>：监控 Redis 实例的状态，自动故障转移。</li><li><strong>集群模式</strong>：支持分布式架构，允许水平扩展，通过分片管理大规模数据集。</li></ul><p>下篇将进行实践操作</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用指令</title>
      <link href="/2025/05/03/Docker%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2025/05/03/Docker%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-跨平台操作指南（Windows-Linux）"><a href="#Docker-跨平台操作指南（Windows-Linux）" class="headerlink" title="Docker 跨平台操作指南（Windows&#x2F;Linux）"></a>Docker 跨平台操作指南（Windows&#x2F;Linux）</h1><h2 id="基础查询指令"><a href="#基础查询指令" class="headerlink" title="基础查询指令"></a>基础查询指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version     <span class="comment"># 查看Docker版本信息</span></span><br><span class="line">docker info        <span class="comment"># 显示系统级信息</span></span><br><span class="line">docker inspect &lt;容器ID&gt;  <span class="comment"># 查看容器详细信息</span></span><br></pre></td></tr></table></figure><h2 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker search &lt;镜像名&gt;    <span class="comment"># 搜索镜像</span></span><br><span class="line">docker image <span class="built_in">ls</span>          <span class="comment"># 列出本地镜像</span></span><br><span class="line">docker image prune       <span class="comment"># 删除悬空镜像</span></span><br><span class="line">docker <span class="built_in">history</span> &lt;镜像名&gt;  <span class="comment"># 查看镜像构建历史</span></span><br></pre></td></tr></table></figure><h2 id="容器生命周期"><a href="#容器生命周期" class="headerlink" title="容器生命周期"></a>容器生命周期</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建并启动容器（通用参数）</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> \</span><br><span class="line">  -p 宿主机端口:容器端口 \</span><br><span class="line">  -v 宿主机路径:容器路径 \</span><br><span class="line">  --network=bridge \</span><br><span class="line">  --hostname mycontainer \</span><br><span class="line">  &lt;镜像名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器操作</span></span><br><span class="line">docker pause/unpause &lt;容器名&gt;  <span class="comment"># 暂停/恢复容器</span></span><br><span class="line">docker rename old_name new_name <span class="comment"># 重命名容器</span></span><br><span class="line">docker update --restart=no &lt;容器名&gt;  <span class="comment"># 修改配置</span></span><br></pre></td></tr></table></figure><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume create myvol  <span class="comment"># 创建数据卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span>            <span class="comment"># 列出数据卷</span></span><br><span class="line">docker <span class="built_in">cp</span> 容器名:路径 宿主机路径  <span class="comment"># 跨系统文件拷贝</span></span><br></pre></td></tr></table></figure><h2 id="差异处理（Windows专项）"><a href="#差异处理（Windows专项）" class="headerlink" title="差异处理（Windows专项）"></a>差异处理（Windows专项）</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PowerShell 路径映射示例</span></span><br><span class="line">docker run <span class="literal">-v</span> <span class="variable">$</span>&#123;<span class="built_in">pwd</span>&#125;:/app microsoft/dotnet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决时区问题（Docker Desktop设置）</span></span><br><span class="line"><span class="string">&quot;environmentVariables&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;TZ&quot;</span>: <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows容器专用命令</span></span><br><span class="line">docker run <span class="literal">--isolation</span>=<span class="keyword">process</span> mcr.microsoft.com/windows/servercore:ltsc2022</span><br></pre></td></tr></table></figure><h2 id="常用工作流"><a href="#常用工作流" class="headerlink" title="常用工作流"></a>常用工作流</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发调试流程</span></span><br><span class="line">docker build -t myapp:dev .  <span class="comment"># 构建镜像</span></span><br><span class="line">docker run -p 3000:3000 myapp:dev  <span class="comment"># 运行测试</span></span><br><span class="line">docker commit &lt;容器ID&gt; myapp:snapshot  <span class="comment"># 保存快照</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产部署流程</span></span><br><span class="line">docker tag myapp:dev registry.example.com/myapp:v1</span><br><span class="line">docker push registry.example.com/myapp:v1</span><br></pre></td></tr></table></figure><h2 id="系统维护"><a href="#系统维护" class="headerlink" title="系统维护"></a>系统维护</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker system <span class="built_in">df</span>  <span class="comment"># 存储空间分析</span></span><br><span class="line">docker stats      <span class="comment"># 实时资源监控</span></span><br><span class="line">docker events     <span class="comment"># 查看系统事件</span></span><br><span class="line">docker <span class="built_in">logout</span> registry.example.com  <span class="comment"># 退出镜像仓库</span></span><br></pre></td></tr></table></figure><h2 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network create mynet  <span class="comment"># 创建自定义网络</span></span><br><span class="line">docker network connect mynet &lt;容器ID&gt;  <span class="comment"># 连接容器</span></span><br><span class="line">docker network disconnect mynet &lt;容器ID&gt;  <span class="comment"># 断开连接</span></span><br></pre></td></tr></table></figure><h2 id="容器安全"><a href="#容器安全" class="headerlink" title="容器安全"></a>容器安全</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --security-opt seccomp:unconfined &lt;镜像名&gt;  <span class="comment"># 禁用安全限制</span></span><br><span class="line">docker run --cap-add=SYS_ADMIN &lt;镜像名&gt;  <span class="comment"># 添加特权</span></span><br></pre></td></tr></table></figure><h2 id="批量容器操作"><a href="#批量容器操作" class="headerlink" title="批量容器操作"></a>批量容器操作</h2><h3 id="Windows-PowerShell"><a href="#Windows-PowerShell" class="headerlink" title="Windows (PowerShell)"></a>Windows (PowerShell)</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动所有容器（需提前保存容器配置）</span></span><br><span class="line"><span class="built_in">Get-Content</span> containers.txt | <span class="built_in">ForEach-Object</span> &#123; docker <span class="built_in">start</span> <span class="variable">$_</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强力清除所有容器（生产环境慎用）</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-aq</span> | <span class="built_in">ForEach-Object</span> &#123; docker stop <span class="variable">$_</span> &#125; | <span class="built_in">ForEach-Object</span> &#123; docker <span class="built_in">rm</span> <span class="variable">$_</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安全模式操作（带确认提示）</span></span><br><span class="line"><span class="variable">$confirmation</span> = <span class="built_in">Read-Host</span> <span class="string">&quot;确认要删除所有容器？[y/n]&quot;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$confirmation</span> <span class="operator">-eq</span> <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">    docker <span class="built_in">ps</span> <span class="literal">-aq</span> | <span class="built_in">ForEach-Object</span> &#123; </span><br><span class="line">        docker stop <span class="variable">$_</span></span><br><span class="line">        docker <span class="built_in">rm</span> <span class="variable">$_</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Linux-MacOS"><a href="#Linux-MacOS" class="headerlink" title="Linux&#x2F;MacOS"></a>Linux&#x2F;MacOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 批量启动容器（需容器已存在）</span></span><br><span class="line">docker start $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量停止并删除（危险操作！）</span></span><br><span class="line">docker stop $(docker ps -aq) &amp;&amp; docker <span class="built_in">rm</span> $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安全脚本示例（带延时确认）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;即将删除所有运行中的容器&quot;</span></span><br><span class="line"><span class="built_in">sleep</span> 5</span><br><span class="line">docker ps -aq | xargs docker stop</span><br><span class="line">docker ps -aq | xargs docker <span class="built_in">rm</span></span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 注意事项：</p><ol><li>批量操作前建议执行 <code>docker ps -a</code> 确认容器列表</li><li>重要容器建议添加<code>--filter</code>参数过滤（如<code>--filter &quot;name=mysql&quot;</code>）</li><li>持久化数据请确保已做好volume映射</li><li>Windows路径中避免使用空格，必要时用双引号包裹路径<br>&#x2F;&#x2F; … existing code …</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Windows 特别提示：</span><br><span class="line">&gt; 1. 使用Docker Desktop需开启&quot;Use the WSL 2 based engine&quot;</span><br><span class="line">&gt; 2. 文件路径使用`/c/`替代`C:\`格式</span><br><span class="line">&gt; 3. 设置`COMPOSE_CONVERT_WINDOWS_PATHS=1`环境变量解决路径转换问题</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> 常用指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Docker</title>
      <link href="/2025/04/30/Linux-ubantu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2025/04/30/Linux-ubantu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<p><del>在此之前我掏钱买了另一个云服务器</del></p><p>在命令行中输入更新软件包索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>下载必要的软件包依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><p>添加官方密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>对于ubuntu 22.04 使用这个命令，当然其他也是同理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>安装docker引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430100620646.png" alt="image-20250430100620646"></p><p>出现这些就差不多了</p><p>查看docker版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430100712775.png" alt="image-20250430100712775"></p><p>出现版本号即为安装成功</p><p>检查docker是否在运行，绿色为运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430101437013.png" alt="image-20250430101437013"></p><p>启动Docker（在没有运行的情况下才使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>拉取测试镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull hello-world</span><br></pre></td></tr></table></figure><p>可能很慢，也可能失败</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430100936669.png" alt="image-20250430100936669"></p><p>很正常，毕竟现在docker官方源已经不能用了</p><p>测试拉取公开镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/acs-sample/nginx:latest</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430104902234.png" alt="image-20250430104902234"></p><p>出现Pull complete即可</p><p>运行一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name my-nginx \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  registry.cn-hangzhou.aliyuncs.com/acs-sample/nginx:latest</span><br></pre></td></tr></table></figure><p>查看运行状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430105551566.png" alt="image-20250430105551566" style="zoom:200%;" /><p>可以看到已经在运行了</p><p>设置镜像源</p><p>在该路径创建一个 daemon.json 文件</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430110922428.png" alt="image-20250430110922428"></p><p>daemon.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;builder&quot;: &#123;</span><br><span class="line">    &quot;gc&quot;: &#123;</span><br><span class="line">      &quot;defaultKeepStorage&quot;: &quot;20GB&quot;,</span><br><span class="line">      &quot;enabled&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;experimental&quot;: false,</span><br><span class="line">      &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">        &quot;https://dockerproxy.com&quot;,</span><br><span class="line">        &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">        &quot;https://docker.nju.edu.cn&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入以上内容后保存！保存！保存！</p><p>保存后重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><p>查看信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>查看镜像源是否起效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker info | grep Mirrors -A 4</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430112447596.png" alt="image-20250430112447596"></p><p>这样就是成功添加4个镜像源了</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> 实操手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装Docker</title>
      <link href="/2025/04/27/Windows%E6%A1%8C%E9%9D%A2%E7%89%88%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2025/04/27/Windows%E6%A1%8C%E9%9D%A2%E7%89%88%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<h4 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h4><p>先下载 Docker ，去官⽹下载 Docker <a href="https://www.docker.com/">www.docker.com</a></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427181804971.png" alt="image-20250427181804971"></p><p>会久一点，可以魔法上网</p><p>下载好之后不计划装在C盘，于是打开cmd输入安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;‪C:\Users\zuiliu\Downloads\Docker Desktop Installer.exe&quot; install --installation-dir=&quot;E:\docker&quot;</span><br></pre></td></tr></table></figure><p>E:\docker为目标地址，弹出窗口后操作</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184052213.png" alt="image-20250427184052213"></p><p>点击ok，等待其完成，这里版本是4.40.0</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184115118.png" alt="image-20250427184115118"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184355223.png" alt="image-20250427184355223"></p><p>完成后关闭即可，在安装后路径点击</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184440181.png" alt="image-20250427184440181"></p><p>启动 docker 后⾸先点 Accept ，之后点 continue without … ，不登陆，然后点右上⻆ skip 忽略</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184644759.png" alt="image-20250427184644759"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184651863.png" alt="image-20250427184651863"></p><p>下面进行汉化</p><p>先在安装后的路径打开 ..\frontend\resources,将app.asar 复制，粘贴到其他地方进行备份</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427185520518.png" alt="image-20250427185520518"></p><p>到<a href="https://github.com/asxez/DockerDesktop-CN/releases">Releases · asxez&#x2F;DockerDesktop-CN</a>下载对应版本的汉化包这里是4.40.0版本</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427185641012.png" alt="image-20250427185641012"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427185713954.png" alt="image-20250427185713954"></p><p>下载好后重命名为app.asar,与上文路径文件覆盖更新就行。</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427193409776.png" alt="image-20250427193409776"></p><p>打开右上角设置-资源-高级-浏览 更改下位置到其他盘</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427193836529.png" alt="image-20250427193836529"></p><p>至此完成配置</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Windows </category>
          
          <category> 实操手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令使用</title>
      <link href="/2025/04/26/git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/04/26/git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>下载git（忽略）</p><p>打开git—bash</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426132227340.png" alt="image-20250426132227340"></p><p>从 gitee中克隆项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/draco99/23cs.git</span><br></pre></td></tr></table></figure><p>身份验证，分别是配置用户名与邮件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#x27;用户名&#x27; </span><br><span class="line">git config --global user.email &#x27;用户@mail.com&#x27;</span><br></pre></td></tr></table></figure><p>一般位置在user中</p><p>在该项目里右键-&gt;Open git bash here</p><p>即可打开该项目的命令行</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426183235121.png" alt="image-20250426183235121"></p><p>显示提交的日志，使用Q键退出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426192043733.png" alt="image-20250426192043733"></p><p>显示前1行日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -1  </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426192248851.png" alt="image-20250426192248851"></p><p>显示提交HEAD日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show HEAD</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426192349243.png" alt="image-20250426192349243"></p><p>查看tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426193032426.png" alt="image-20250426193032426"></p><p>没有打tag就不显示</p><p>删除某个文件（不敢动）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm xxx</span><br></pre></td></tr></table></figure><p>显示本地分支（这里就一个主分支dev）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426194018739.png" alt="image-20250426194018739"></p><p>确认分支状态（修改的文件夹）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426194753432.png" alt="image-20250426194753432"></p><p>先在远程拉取到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426200503116.png" alt="image-20250426200503116"></p><p>添加记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件/路径</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426201258106.png" alt="image-20250426201258106"></p><p>完成合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426200536417.png" alt="image-20250426200536417"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426201419760.png" alt="image-20250426201419760"></p><p>提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426200552679.png" alt="image-20250426200552679"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426201528811.png" alt="image-20250426201528811"></p><p>参考（<a href="https://www.runoob.com/note/56524">Git 常用命令大全</a>）</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> 常用指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx流媒体配置</title>
      <link href="/2025/04/25/Ngnix%E9%85%8D%E7%BD%AE%E6%B5%81%E5%AA%92%E4%BD%93/"/>
      <url>/2025/04/25/Ngnix%E9%85%8D%E7%BD%AE%E6%B5%81%E5%AA%92%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h4 id="首先是视频与音频托管"><a href="#首先是视频与音频托管" class="headerlink" title="首先是视频与音频托管"></a>首先是视频与音频托管</h4><p>1、准备一些视频，并上传到云服务器，这里传到 C:&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;音视频&#x2F; 中</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424103813912.png" alt="image-20250424103813912"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424104616189.png" alt="image-20250424104616189"></p><p>2、在之前的Nginx配置文件中配置视频路径，支持中文字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 配置视频路径</span><br><span class="line">       location /video/ &#123;</span><br><span class="line">           alias &quot;C:/Users/Administrator/Desktop/音视频/&quot;;  # 注意使用正斜杠或双反斜杠</span><br><span class="line">           autoindex on;  # 可选：启用目录浏览功能</span><br><span class="line">           expires 30d;   # 设置缓存过期时间</span><br><span class="line"></span><br><span class="line">           # 可选：启用 gzip 压缩以减少带宽消耗</span><br><span class="line">           gzip on;</span><br><span class="line">           gzip_types video/mp4 application/x-mpegURL;</span><br><span class="line">           gzip_vary on;</span><br><span class="line">           # 启用字节范围请求</span><br><span class="line">           add_header Accept-Ranges bytes;</span><br><span class="line">           add_header Content-Disposition inline;</span><br><span class="line">       &#125;        </span><br></pre></td></tr></table></figure><p>3、使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure><p>更新配置</p><p>4、浏览器输入 (http:&#x2F;&#x2F;服务器IP:8088&#x2F;video&#x2F;pv01.mp4) 可以发现浏览器已经帮你下载好了</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424104906268.png" alt="image-20250424104906268"></p><p>启用目录浏览的功能后可以清晰的看到文件</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424105033106.png" alt="image-20250424105033106"></p><p>但是，中文在这里显示会异常，注意甄别，音频界面如下</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424105338039.png" alt="image-20250424105338039"></p><p>类似BIliBIli或网易云音乐那样，简单的写一个视频播放列表的网页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>在线播放视频<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>选择要播放的视频<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;videoList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;videoPlayer&quot;</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;360&quot;</span> <span class="attr">controls</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span></span><br><span class="line">        您的浏览器不支持视频播放。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取视频文件列表</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&#x27;http://云服务器IP:8088/video/&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> parser = <span class="keyword">new</span> <span class="title class_">DOMParser</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> doc = parser.<span class="title function_">parseFromString</span>(html, <span class="string">&#x27;text/html&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> links = <span class="title class_">Array</span>.<span class="title function_">from</span>(doc.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a[href$=&quot;.mp4&quot;]&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> videoList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;videoList&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> videoPlayer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;videoPlayer&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                links.<span class="title function_">forEach</span>(<span class="function"><span class="params">link</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> videoName = link.<span class="property">textContent</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    li.<span class="property">innerHTML</span> = <span class="string">`&lt;a href=&quot;#&quot; onclick=&quot;playVideo(&#x27;<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(videoName)&#125;</span>&#x27;)&quot;&gt;<span class="subst">$&#123;videoName&#125;</span>&lt;/a&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">                    videoList.<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 播放视频</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">window</span>.<span class="property">playVideo</span> = <span class="keyword">function</span>(<span class="params">videoFile</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    videoPlayer.<span class="property">src</span> = <span class="string">`http://云服务器IP:8088/video/<span class="subst">$&#123;videoFile&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">                    videoPlayer.<span class="property">type</span> = <span class="string">&#x27;video/mp4&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    videoPlayer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    videoPlayer.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;无法加载视频列表:&#x27;</span>, error));</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单的写的页面效果（测试功能，没必要调（）</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424105852935.png" alt="image-20250424105852935"></p><p>这样只需点击列表即可切换视频进行观看，Nginx的性能优化很棒，播放的视频是没有压缩的，负载也小</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
          <category> 实操手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 自媒体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx实践操作</title>
      <link href="/2025/04/20/Nginx%E5%AE%9E%E6%93%8D%EF%BC%81/"/>
      <url>/2025/04/20/Nginx%E5%AE%9E%E6%93%8D%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h4 id="Nginx安装实操！"><a href="#Nginx安装实操！" class="headerlink" title="Nginx安装实操！"></a>Nginx安装实操！</h4><p>打开上文中的<a href="https://nginx.org/en/">官网</a> ，在右侧点击 download </p><p><img src="https://img.picui.cn/free/2025/04/18/68023c1847862.png"></p><p>或者<a href="https://nginx.org/en/download.html">直转下载</a></p><p>这里选择稳定版本，左侧红框为linux版本，右侧是windows版本</p><p><img src="https://img.picui.cn/free/2025/04/18/68023d163cb43.png"></p><h5 id="windows内找一个适合的路径解压，注意路径中不能有中文！！！"><a href="#windows内找一个适合的路径解压，注意路径中不能有中文！！！" class="headerlink" title="windows内找一个适合的路径解压，注意路径中不能有中文！！！"></a>windows内找一个适合的路径解压，注意路径中不能有中文！！！</h5><p><img src="https://img.picui.cn/free/2025/04/18/68023eeca5bf6.png"></p><p>双击exe，打开任务管理器，里面有相对应的进程就启动成功了</p><p><img src="https://img.picui.cn/free/2025/04/18/6802450432c3d.png"></p><p>打开位于 conf 的 nginx.conf 文件，这个是nginx的配置文件，默认配置的nginx监听的端口为80。</p><p><img src="https://img.picui.cn/free/2025/04/18/68024237b91fe.png"></p><p>在正常情况下，浏览器输入 <a href="http://localhost/">localhost</a> 是可以看到nginx的欢迎页面的</p><p>但是我出现了这个情况（请忽视https，是输入后被跳转的）</p><p><img src="https://img.picui.cn/free/2025/04/18/680243246daa3.png"></p><p>这种情况一般是设备的80端口被占用，可以在配置文件（nginx.conf）修改为未被占用的端口即可。</p><p>把监听端口修改成为了82，</p><p>当我们修改了nginx的配置文件nginx.conf 时，不需要关闭nginx后重新启动nginx，我们只需要使用管理员权限打开CMD或者Powershell，使用”D:”切换盘符，如果是C盘就直接使用 cd + 你之前解压的路径 来指定路径。</p><p><img src="https://img.picui.cn/free/2025/04/18/68024b0f64f2b.png"></p><p>然后执行命令，就可以重载配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload </span><br></pre></td></tr></table></figure><p>执行下列指令来检查nginx是否在线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist | findstr nginx</span><br></pre></td></tr></table></figure><p>如果在线会出现俩个进程</p><p><img src="https://img.picui.cn/free/2025/04/18/68024bee55ed5.png"></p><p>之后再到浏览器输入 <a href="http://localhost:82/">localhost</a> 就可以看到欢迎页面了，也代表启动成功</p><p><img src="https://img.picui.cn/free/2025/04/18/68024a4394ad3.png"></p><p>打开软件路径里的html文件夹，可以看到index.html和50x.html，这是可以放入自己写的网页</p><p><img src="https://img.picui.cn/free/2025/04/18/68024e8e75883.png"></p><p>当然，网页的名字同样不能使用中文</p><p><img src="https://img.picui.cn/free/2025/04/18/68024fd407a0e.png"></p><p><img src="https://img.picui.cn/free/2025/04/18/68024f8974fff.png"></p><p>甚至是文件，当然这个之后再说</p><h5 id="Linux系统的安装"><a href="#Linux系统的安装" class="headerlink" title="Linux系统的安装"></a>Linux系统的安装</h5><p>在下载好Linux版本的Nginx后，打开你的Linux机器登录，这里使用FinalShell进行操作，优点是可以直接对linux进行文件管理。此机器是本地的Linux虚拟机、云服务器则直接使用域名或者公网进行链接，操作方式是相同的</p><p>在linux机器使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>进行查看此linux的ip，发现是192.168.128.128</p><p><img src="https://img.picui.cn/free/2025/04/19/68034acd7a3db.png">、</p><p>使用这俩个命令来检查其依赖是否安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep gcc</span><br><span class="line">rpm -qa|grep pcre</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/04/19/680340db25dfe.png">像这样就安装好了</p><p>如果没有，则使用在线安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p>如果还是没有效果的话在网络上寻找相关的rpm包，比如pcre-devel-8.32-17.el7.x86_64.rpm、pcre-8.32-17.el7.x86_64.rpm这两个包</p><p>下载好上传到服务器进行安装，安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh pcre-devel-8.32-17.el7.x86_64.rpm</span><br><span class="line">rpm -ivh pcre-8.32-17.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>之后将下载好的本体安装包拖入到你喜欢的文件夹里</p><p><img src="https://img.picui.cn/free/2025/04/19/6803445291ff3.png"></p><p>使用cd 到该压缩包目录之后（这里是&#x2F;export&#x2F;software）进行解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.26.3.tar.gz</span><br></pre></td></tr></table></figure><p>移动到server里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /export/software/nginx-1.26.3 /export/servers/</span><br></pre></td></tr></table></figure><p>cd到服务器的位置,接着执行下面的指令，稍等片刻安装完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /export/servers/nginx-1.26.3 </span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>cd切换目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br></pre></td></tr></table></figure><p>使用.&#x2F;nginx启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>放行80端口（如果在配置文件修改后请修改到对应端口）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><p>这个指令可以在本地访问网页，当出现html文本格式时即为成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:80</span><br></pre></td></tr></table></figure><p>浏览器访问时需要注意你的Linux是可联网、有IP地址的，端口放行了的</p><img src="https://img.picui.cn/free/2025/04/19/68034f22de100.png" style="zoom:80%;" /><h4 id="常用指令-WINDOWS"><a href="#常用指令-WINDOWS" class="headerlink" title="常用指令(WINDOWS)"></a>常用指令(WINDOWS)</h4><p>强行停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /F /IM nginx.exe</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>重载配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload </span><br></pre></td></tr></table></figure><p>检查nginx是否在线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist | findstr nginx</span><br></pre></td></tr></table></figure><p>检查80端口是否被占用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr :80</span><br></pre></td></tr></table></figure><h4 id="常用指令-Linux"><a href="#常用指令-Linux" class="headerlink" title="常用指令(Linux)"></a>常用指令(Linux)</h4><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /export/servers/nginx-1.26.3  (你目录)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>重载配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p>快速停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure><p>等工作后停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s quit</span><br></pre></td></tr></table></figure><h4 id="Nginx的反向代理实操"><a href="#Nginx的反向代理实操" class="headerlink" title="Nginx的反向代理实操"></a>Nginx的反向代理实操</h4><p>​在此之前先简单写一个后端，这里先忽视SSL证书，毕竟是测试不着急使用。</p><p>项目结构，这里偷懒使用了IDEA自带的生成器。</p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420215023976.png" alt="image-20250420215023976" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TestController.java 部分</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.boottestduoduan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;testPath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleTest</span><span class="params">(<span class="meta">@PathVariable</span> String testPath)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;处理路径：&quot;</span> + testPath + <span class="string">&quot;，当前端口：&quot;</span> + System.getProperty(<span class="string">&quot;server.port&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了图方便弄了个启动bat脚本，把查询到的启动指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line"></span><br><span class="line">start cmd /k &quot;java -Dserver.port=8081 -DPORT=8081 -jar target\boot-testduoduan-0.0.1-SNAPSHOT.jar --testPath=test01&quot;</span><br><span class="line">start cmd /k &quot;java -Dserver.port=8082 -DPORT=8082 -jar target\boot-testduoduan-0.0.1-SNAPSHOT.jar --testPath=test02&quot;</span><br><span class="line">start cmd /k &quot;java -Dserver.port=8083 -DPORT=8083 -jar target\boot-testduoduan-0.0.1-SNAPSHOT.jar --testPath=test03&quot;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>给项目打包，传到云服务器并启动</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420221947018.png" alt="image-20250420221947018"></p><p>之后给Ngnix配置简单的反向代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen       8088;</span><br><span class="line">    server_name  服务器IP;  # 这里是云服务器的公网ip</span><br><span class="line">    </span><br><span class="line">    # 这里使用proxy_pass指令来实现反向代理，把所有请求代理到后端</span><br><span class="line">    # proxy_set_header 来确保Host头部可以传到后端服务器</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:80;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过里面没有设置负载均衡，但实现了反向代理，效果如下</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420225522220.png" alt="image-20250420225522220"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420225552229.png" alt="image-20250420225552229"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420223740614.png" alt="image-20250420223740614"></p><p>在浏览器输入 http:&#x2F;&#x2F;公网ip:8088&#x2F;test01.html 后，多次刷新发起请求，可以发现其已经映射到test01的三个端口轮流顺序</p><p>8081&#x3D;&gt;8082&#x3D;&gt;8083&#x3D;&gt;8082&#x3D;&gt;8081进行展示的</p><p>如果需要添加负载均衡也很简单在http{}模块内使用upstream实现负载均衡（见Nginx初步了解）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">        server 127.0.0.1:80;</span><br><span class="line">        server 127.0.0.1:8080;#这里怎么设置服务器都行</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">######</span><br><span class="line">  upstream backend &#123;</span><br><span class="line">        server 127.0.0.1:80;</span><br><span class="line">        server 127.0.0.1:8080;#这里怎么设置服务器都行</span><br><span class="line">    &#125;</span><br><span class="line">######</span><br><span class="line">  server &#123;</span><br><span class="line">    listen       8088;</span><br><span class="line">    server_name  服务器IP;  # 这里是云服务器的公网ip</span><br><span class="line">    </span><br><span class="line">    # 这里使用proxy_pass指令来实现反向代理，把所有请求代理到后端</span><br><span class="line">    # proxy_set_header 来确保Host头部可以传到后端服务器</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:80;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（拓展）使用Openssl生成临时证书"><a href="#（拓展）使用Openssl生成临时证书" class="headerlink" title="（拓展）使用Openssl生成临时证书"></a>（拓展）使用Openssl生成临时证书</h5><p>先根据此文章把Openssl安装好 <a href="https://blog.csdn.net/loveryunz/article/details/136739887">保姆级OpenSSL下载及安装教程,OpenSSL下载及安装教程-CSDN博客</a></p><p>之后单击安装的路径输入cmd</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420212433077.png" alt="image-20250420212433077"></p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br></pre></td></tr></table></figure><p>检验，出现下面指令即为正常</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420212503930.png" alt="image-20250420212503930"></p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:2048 -keyout private.key -out certificate.crt -days 365 -nodes</span><br></pre></td></tr></table></figure><p>来进行快速生成一个测试证书与为期一年的密钥</p><p>之后出现这些页面，按要求填写就行，不想填可以直接输入 <strong>.</strong>，其中Common Name需要填你的服务器地址，如果是本地就填localhost</p><p>这里我把云服务器地址码了</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420213035900.png" alt="image-20250420213035900"></p><p>这时候就弄好了，图中勾选的就是</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420213600016.png" alt="image-20250420213600016"></p><p>之后正常配置添加就行了，唯一的缺点是不是受信任的证书，这里不详细展示了</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
          <category> 实操手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基本概念</title>
      <link href="/2025/04/19/Nginx%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/"/>
      <url>/2025/04/19/Nginx%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx基本概念"><a href="#Nginx基本概念" class="headerlink" title="Nginx基本概念"></a>Nginx基本概念</h2><p>目录：</p><ol><li>-<a href="#%E6%98%AF%E4%BB%80%E4%B9%88">Nginx究竟是什么？</a></li><li>-<a href="%E4%BB%80%E4%B9%88%E7%89%B9%E5%88%AB%E7%9A%84">Nginx有什么特别之处？</a></li><li>-<a href="%E6%AD%A3%E5%90%91%E4%B8%8E%E5%8F%8D%E5%90%91">Nginx的反向代理</a></li><li>-<a href="%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">Nginx的负载均衡</a></li></ol><h5 id="1、Nginx究竟是什么？"><a href="#1、Nginx究竟是什么？" class="headerlink" title="1、Nginx究竟是什么？"></a>1、Nginx究竟是什么？<a id="是什么"></a></h5><p>​打开它的<a href="https://nginx.org/en/">官网</a> 发现语言选项只有英文与俄文，是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的一个高性能的HTTP好反向代理web的服务器，同时提供了IMAP&#x2F;POP3&#x2F;SMTP服务。</p><h5 id="2、Nginx有什么特别之处？"><a href="#2、Nginx有什么特别之处？" class="headerlink" title="2、Nginx有什么特别之处？"></a>2、Nginx有什么特别之处？<a id="什么特别的"></a></h5><ul><li><strong>轻量级</strong>的Web 服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器</li><li>占的<strong>内存少</strong>！<strong>高并发</strong>能力更强！</li><li>支持<strong>热部署</strong>，启动<strong>简单</strong>！</li></ul><h5 id="3、Nginx的反向代理"><a href="#3、Nginx的反向代理" class="headerlink" title="3、Nginx的反向代理"></a>3、Nginx的反向代理<a id="正向与反向"></a></h5><h6 id="在此之前，什么是代理呢？作用是？"><a href="#在此之前，什么是代理呢？作用是？" class="headerlink" title="在此之前，什么是代理呢？作用是？"></a>在此之前，什么是代理呢？作用是？</h6><p>​代理（Proxy）在网络中是指一个中间服务器，它代表客户端或服务器来发送网络请求或接收响应。代理服务器本质上是一个中介角色，位于客户端和目标服务器之间。通过代理，原始的请求会被转发到目标服务器，而响应也会通过代理返回给最初的请求发起者。常见于VPN、加速器、与项目部署的代理。</p><p>​代理主要作用是：保护隐私、控制访问、性能优化、负载均衡、跨越网络限制。通过代理对客户端的ip进行保护、添加缓存、权限管理、绕过网络防火墙等操作保障使用与安全。</p><h6 id="这是通常情况下浏览器与服务器的链接"><a href="#这是通常情况下浏览器与服务器的链接" class="headerlink" title="这是通常情况下浏览器与服务器的链接"></a>这是通常情况下浏览器与服务器的链接</h6><p>​<img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250417222831582.png" alt="image-20250417222831582"></p><h6 id="我们在浏览外部网站时经过国内服务器一般是打不开的，一般会本地搭建个服务器来帮忙，这样以通过配置一个正向代理服务器来间接访问互联网上的资源的链接方式即为正向代理"><a href="#我们在浏览外部网站时经过国内服务器一般是打不开的，一般会本地搭建个服务器来帮忙，这样以通过配置一个正向代理服务器来间接访问互联网上的资源的链接方式即为正向代理" class="headerlink" title="我们在浏览外部网站时经过国内服务器一般是打不开的，一般会本地搭建个服务器来帮忙，这样以通过配置一个正向代理服务器来间接访问互联网上的资源的链接方式即为正向代理"></a>我们在浏览外部网站时经过国内服务器一般是打不开的，一般会本地搭建个服务器来帮忙，这样以通过配置一个正向代理服务器来间接访问互联网上的资源的链接方式即为正向代理</h6><h6 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250417223545112.png" alt="image-20250417223545112"></h6><p>后端的服务器可以按需要扩充，服务变多之后，每个服务对应都有IP与端口，所以在之间提供一个进程让其对外一个URL域名，进程来时将这些请求均匀的转发到每个服务器</p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250419203253366.png" alt="image-20250419203253366" style="zoom:50%;" /><h6 id="Nginx的反向代理"><a href="#Nginx的反向代理" class="headerlink" title="Nginx的反向代理"></a>Nginx的反向代理</h6><p>​Nginx的反向代理则是为服务器设计的，是 Nginx 的核心功能之一。它代表服务器接收客户端请求与处理，并根据具体情况将这些请求转发给一个或多个后端服务器处理。反向代理对于客户端来说是透明的，客户端并不知道它的存在。Nginx常被用作高性能的反向代理服务器，用于实现负载均衡、加速静态内容服务等目的。但是客户端眼里，服务器只有唯一的一台，就是代理服务器。这么做不论在保护用户隐私上还是服务器访问压力下都可以得到很好的缓解与优化。</p><p>​反向代理有以下核心功能： </p><p>​<strong>负载均衡</strong>：将请求分发到多个后端服务器。</p><p>​<strong>安全防护</strong>：隐藏后端服务器 IP，防止直接暴露。</p><p>​<strong>SSL 终结</strong>：由 Nginx 统一处理 HTTPS 加密&#x2F;解密，降低后端压力。</p><p>​<strong>缓存加速</strong>：缓存静态资源，提升响应速度。</p><p>​<strong>路由转发</strong>：根据路径、域名等规则，将请求导向不同服务。</p><p>​这里是简单的反向代理配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;                          # 监听公网 80 端口</span><br><span class="line">    server_name example.com;            # 你的域名或服务器 IP</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:3000;  # 核心指令：转发到本地 3000 端口</span><br><span class="line"></span><br><span class="line">        # 透传客户端信息（关键！否则后端可能无法获取真实 IP 等）</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">配置项</th><th>用途</th></tr></thead><tbody><tr><td align="left">proxy_pass</td><td>核心指令，定义转发目标地址</td></tr><tr><td align="left">proxy_set_header</td><td>透传客户端原始信息，确保后端服务能获取真实 IP、协议、域名等</td></tr><tr><td align="left">listen 80</td><td>监听标准 HTTP 端口，默认80</td></tr><tr><td align="left">server_name</td><td>指定域名，可配置多个或通配符</td></tr></tbody></table><p>这是将&#x2F;api的请求来转发到Java服务（8081），其他请求转发到Node.js前端(3000)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location /api &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8081;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:3000;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>特性</strong></th><th><strong>反向代理</strong></th><th><strong>正向代理</strong></th></tr></thead><tbody><tr><td><strong>客户端感知</strong></td><td>无感知（以为在访问真实服务器）</td><td>需主动配置代理服务器</td></tr><tr><td><strong>用途</strong></td><td>保护后端、负载均衡、缓存加速</td><td>突破网络限制、匿名访问</td></tr><tr><td><strong>典型代表</strong></td><td>Nginx、Cloudflare</td><td>Shadowsocks、Charles</td></tr></tbody></table><p>通过反向代理，Nginx 可轻松实现服务的统一入口管理和安全防护，是微服务架构中不可或缺的组件。</p><h5 id="4、Nginx的负载均衡"><a href="#4、Nginx的负载均衡" class="headerlink" title="4、Nginx的负载均衡"></a>4、Nginx的负载均衡<a id="负载均衡"></a></h5><p>​Nginx实现负载均衡主要是通过其反向代理功能来分发客户端请求到多个后端服务器，以达到优化资源使用、提高响应速度和增加系统可靠性等目的，它充当客户端和后端服务器之间的中间人，<strong>对外隐藏真实服务器</strong>。换句话说，当一个服务器压力大的时候，Nginx会安排另外的几个服务器来帮忙分担任务。客户端只需要访问一个对外的服务器地址既可安排真实服务器与其对接。</p><p>Nginx支持多种负载均衡算法，可以在<code>upstream</code>块中指定：</p><ol><li><strong>轮询（默认）</strong>：每个请求按时间顺序逐一分配到不同的后端服务器。如果后端服务器down掉，能自动剔除。它按照上游池中服务器列表的顺序分发请求。当上游服务器的容量变化时，还可以考虑使用加权轮询。适合服务器配置相当，无状态且短平快的服务使用。也适用于图片服务器集群和纯静态页面服务器集群。但不适合有异构工作负载或服务器池的用例。</li><li><strong>权重（weight）</strong>：根据权重分配请求，权重越高的服务器处理的请求越多。适用于服务器性能差异较大的场景。这种方式比较灵活,用于后端服务器性能不均的情况。</li><li><strong>IP哈希（ip_hash）</strong>：仅适用于 HTTP。IP 哈希算法使用客户端 IP 地址作为哈希。IP 哈希与通用 哈希存在细微的不同，前者使用 IPv4 地址的前三个八进制位或整个 IPv6 地址，而 后者使用的是远程变量。当会话状态十分重要，但又无法通过应用的共享内存进行 处理时，此方法可确保客户端始终被代理到同一上游服务器（只要服务器可用）。基于客户端IP地址的哈希值选择服务器，确保来自同一IP的请求总是被发送到相同的服务器上，除非该服务器不可用。如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</li><li><strong>最少连接（least_conn）</strong>：通过将当前请求代理到打开连接数最少的上游服务器实现负载均衡，将下一个请求分配给当前活跃连接数最少的服务器，最少连接也会考虑权重，适合长连接的情况。</li></ol><p>Nginx中的常见的负载均衡分为 HTTP 负载均衡、TCP 负载均衡、UDP 负载均衡这3种。</p><p>​举个例子，将负载分发到两个HTTP服务器上，在Nginx路径下的config文件里的配置文件中找到http模块，将使用</p><p>upstream代码块来实施,写入到http{}模块内就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">  server 10.10.12.45:80 weight=1;</span><br><span class="line">  server app.example.com:80 weight=2;</span><br><span class="line">  server spare.example.com:80 backup;</span><br><span class="line"> &#125;</span><br><span class="line"> server &#123;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://backend;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该配置对端口 80 的两台 HTTP 服务器实施负载均衡，然后再将另一台服务器定义为  backup，以便在两台主服务器不可用时发挥作用。可选的 weight 参数指示 NGINX 向 第二台服务器传输两倍的请求。未使用时，它的默认值为 1。这样权重分配可以控制Http的负载均衡。权重越大、该服务器压力与请求相对越大。</p><p>​而TCP负载均衡也与之大差不差，主要区别是在stream模块中实施,它们在OSI模型的不同层上运行，这个例子中的 server 代码块指示 NGINX 侦听 TCP 端口 3306，并在两个 MySQL 数据库 读取副本之间实施负载均衡，同时将另一台服务器定义为 backup，以便在主服务器崩溃时接管流量。stream 上下文默认情况下只能对数据包进行路由和负载均衡。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">  upstream mysql_read &#123;</span><br><span class="line">    server read1.example.com:3306 weight=5;</span><br><span class="line">    server read2.example.com:3306;</span><br><span class="line">    server 10.10.12.34:3306 backup;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 3306;</span><br><span class="line">    proxy_pass mysql_read;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>​UDP 负载均衡的指定非常简单，只需使用 listen 指令中的 udp 参数便可。在 NGINX 的 stream 模块内使用 upstream 代码块（定义为 udp）对 UDP 服务器实施负载均衡。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">  upstream ntp &#123;</span><br><span class="line">    server ntp1.example.com:123 weight=2;</span><br><span class="line">    server ntp2.example.com:123;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 123 udp;</span><br><span class="line">    proxy_pass ntp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 TCP 类似，我们可以在 stream 模块中找到 UDP 负载均衡，并以同样的方式完成大部分配置。两者的主要区别在于，UDP 负载均衡的 listen 指令指定打开的套接字用于处 理 UDP 数据报（datagram）。UDP 负载均衡可能对某些企业来说不太常见，但在大 型环境中十分有用。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
