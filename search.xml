<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>redis基础知识</title>
      <link href="/2025/05/07/redis%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/05/07/redis%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是redis？"><a href="#什么是redis？" class="headerlink" title="什么是redis？"></a>什么是redis？</h3><p>  Redis:REmote DIctionary Server(远程字典服务)。由意大利人Salvatore Sanfilippo开发。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>内存高速缓存</li><li>key&#x2F;value分布式内存数据库</li><li>支持持久化</li><li>NoSQL</li><li>C语言编写</li><li>开源免费</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>缓存系统（“热点”数据：高频读、低频写）、计数器、消息队列系统、排行榜、社交网络和实时系统。</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>分5个自有类型与一种自定义类型，自有类型包括</p><ul><li>String类</li><li>哈希类</li><li>列表类</li><li>集合类</li><li>顺序集合类</li></ul><h5 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h5><p>以二进制安全字符串组成，换句话说它理论可以存储一切二进制字符组成的文件，包括但不限于音视频、字符串、图片等，最高支持到512M。</p><p>可以使用这些操作指令进行：</p><ul><li>GET&#x2F;MGET</li><li>SET&#x2F;SETEX&#x2F;MSET&#x2F;MSETNX</li><li>INCR&#x2F;DECR</li><li>GETSET</li><li>DEL</li></ul><h5 id="哈希类"><a href="#哈希类" class="headerlink" title="哈希类"></a>哈希类</h5><p>由两个字符串类型的字段（field）与值（value）组成的键值对集合（map），其中字段是唯一的，一个哈希类的键包含一或多个字段，一个字段关联一个值。常常使用哈希来存储用户的信息，包含但不限于用户名、密码、电子邮件、手机号等。</p><p>可以使用这些操作指令进行：</p><ul><li>HGET&#x2F;HMGET&#x2F;HGETALL</li><li>HSET&#x2F;HMSET&#x2F;HSETNX</li><li>HEXISTS&#x2F;HLEN</li><li>HKEYS&#x2F;HDEL</li><li>HVALS</li></ul><h5 id="列表类-LIST"><a href="#列表类-LIST" class="headerlink" title="列表类 LIST"></a>列表类 LIST</h5><p>插入拍戏的字符串元素集合，多用双链表实现。</p><p>可以使用这些操作指令进行：</p><ul><li>LPUSH&#x2F;LPUSHX&#x2F;LPOP&#x2F;RPUSH&#x2F;RPUSHX&#x2F;RPOP&#x2F;LINSERT&#x2F;LSET</li><li>LINDEX&#x2F;LRANGE</li><li>LLEN&#x2F;LTRIM</li></ul><h5 id="集合类-SET"><a href="#集合类-SET" class="headerlink" title="集合类 SET"></a>集合类 SET</h5><p>无顺序集合，与列表类区别是：集合中元素无序且唯一，用哈希表实现。多用于交集、并集的计算，在找共同兴趣、好友、共同关注上引用。</p><p>可以使用这些操作指令进行：</p><ul><li>SADD&#x2F;SPOP&#x2F;SMOVE&#x2F;SCARD</li><li>SINTER&#x2F;SDIFF&#x2F;SDIFFSTORE&#x2F;SUNION</li></ul><h5 id="顺序集合类"><a href="#顺序集合类" class="headerlink" title="顺序集合类"></a>顺序集合类</h5><p>有序的集合类型，每个元素管理一个double类权值，从小到大排序，与set差不多。</p><h4 id="数据结构多样"><a href="#数据结构多样" class="headerlink" title="数据结构多样"></a>数据结构多样</h4><p><img src="https://s21.ax1x.com/2025/05/07/pELuIKJ.png"></p><p>其中压缩列表是列表键和哈希键的底层实现之一，整数集合是集合键的底层实现之一。</p><h4 id="内存存储持续化"><a href="#内存存储持续化" class="headerlink" title="内存存储持续化"></a>内存存储持续化</h4><p>所有数据默认保存在内存中，保证了极高的读写速度。有两个持久化选项</p><ul><li><strong>RDB（快照）</strong>：定期将内存中的数据集以二进制形式快照保存到磁盘上。</li><li><strong>AOF（追加文件）</strong>：记录服务器接收到的每一个写操作命令，在重启时重放这些命令恢复数据。</li></ul><h4 id="高可用性与扩展性"><a href="#高可用性与扩展性" class="headerlink" title="高可用性与扩展性"></a>高可用性与扩展性</h4><ul><li><strong>主从复制</strong>：实现数据冗余和读写分离，提高系统的可用性和读取性能。</li><li><strong>哨兵（Sentinel）机制</strong>：监控 Redis 实例的状态，自动故障转移。</li><li><strong>集群模式</strong>：支持分布式架构，允许水平扩展，通过分片管理大规模数据集。</li></ul><p>下篇将进行实践操作</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用指令</title>
      <link href="/2025/05/03/Docker%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2025/05/03/Docker%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-跨平台操作指南（Windows-Linux）"><a href="#Docker-跨平台操作指南（Windows-Linux）" class="headerlink" title="Docker 跨平台操作指南（Windows&#x2F;Linux）"></a>Docker 跨平台操作指南（Windows&#x2F;Linux）</h1><h2 id="基础查询指令"><a href="#基础查询指令" class="headerlink" title="基础查询指令"></a>基础查询指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version     <span class="comment"># 查看Docker版本信息</span></span><br><span class="line">docker info        <span class="comment"># 显示系统级信息</span></span><br><span class="line">docker inspect &lt;容器ID&gt;  <span class="comment"># 查看容器详细信息</span></span><br></pre></td></tr></table></figure><h2 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker search &lt;镜像名&gt;    <span class="comment"># 搜索镜像</span></span><br><span class="line">docker image <span class="built_in">ls</span>          <span class="comment"># 列出本地镜像</span></span><br><span class="line">docker image prune       <span class="comment"># 删除悬空镜像</span></span><br><span class="line">docker <span class="built_in">history</span> &lt;镜像名&gt;  <span class="comment"># 查看镜像构建历史</span></span><br></pre></td></tr></table></figure><h2 id="容器生命周期"><a href="#容器生命周期" class="headerlink" title="容器生命周期"></a>容器生命周期</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建并启动容器（通用参数）</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> \</span><br><span class="line">  -p 宿主机端口:容器端口 \</span><br><span class="line">  -v 宿主机路径:容器路径 \</span><br><span class="line">  --network=bridge \</span><br><span class="line">  --hostname mycontainer \</span><br><span class="line">  &lt;镜像名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器操作</span></span><br><span class="line">docker pause/unpause &lt;容器名&gt;  <span class="comment"># 暂停/恢复容器</span></span><br><span class="line">docker rename old_name new_name <span class="comment"># 重命名容器</span></span><br><span class="line">docker update --restart=no &lt;容器名&gt;  <span class="comment"># 修改配置</span></span><br></pre></td></tr></table></figure><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume create myvol  <span class="comment"># 创建数据卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span>            <span class="comment"># 列出数据卷</span></span><br><span class="line">docker <span class="built_in">cp</span> 容器名:路径 宿主机路径  <span class="comment"># 跨系统文件拷贝</span></span><br></pre></td></tr></table></figure><h2 id="差异处理（Windows专项）"><a href="#差异处理（Windows专项）" class="headerlink" title="差异处理（Windows专项）"></a>差异处理（Windows专项）</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PowerShell 路径映射示例</span></span><br><span class="line">docker run <span class="literal">-v</span> <span class="variable">$</span>&#123;<span class="built_in">pwd</span>&#125;:/app microsoft/dotnet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决时区问题（Docker Desktop设置）</span></span><br><span class="line"><span class="string">&quot;environmentVariables&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;TZ&quot;</span>: <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows容器专用命令</span></span><br><span class="line">docker run <span class="literal">--isolation</span>=<span class="keyword">process</span> mcr.microsoft.com/windows/servercore:ltsc2022</span><br></pre></td></tr></table></figure><h2 id="常用工作流"><a href="#常用工作流" class="headerlink" title="常用工作流"></a>常用工作流</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发调试流程</span></span><br><span class="line">docker build -t myapp:dev .  <span class="comment"># 构建镜像</span></span><br><span class="line">docker run -p 3000:3000 myapp:dev  <span class="comment"># 运行测试</span></span><br><span class="line">docker commit &lt;容器ID&gt; myapp:snapshot  <span class="comment"># 保存快照</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产部署流程</span></span><br><span class="line">docker tag myapp:dev registry.example.com/myapp:v1</span><br><span class="line">docker push registry.example.com/myapp:v1</span><br></pre></td></tr></table></figure><h2 id="系统维护"><a href="#系统维护" class="headerlink" title="系统维护"></a>系统维护</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker system <span class="built_in">df</span>  <span class="comment"># 存储空间分析</span></span><br><span class="line">docker stats      <span class="comment"># 实时资源监控</span></span><br><span class="line">docker events     <span class="comment"># 查看系统事件</span></span><br><span class="line">docker <span class="built_in">logout</span> registry.example.com  <span class="comment"># 退出镜像仓库</span></span><br></pre></td></tr></table></figure><h2 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network create mynet  <span class="comment"># 创建自定义网络</span></span><br><span class="line">docker network connect mynet &lt;容器ID&gt;  <span class="comment"># 连接容器</span></span><br><span class="line">docker network disconnect mynet &lt;容器ID&gt;  <span class="comment"># 断开连接</span></span><br></pre></td></tr></table></figure><h2 id="容器安全"><a href="#容器安全" class="headerlink" title="容器安全"></a>容器安全</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --security-opt seccomp:unconfined &lt;镜像名&gt;  <span class="comment"># 禁用安全限制</span></span><br><span class="line">docker run --cap-add=SYS_ADMIN &lt;镜像名&gt;  <span class="comment"># 添加特权</span></span><br></pre></td></tr></table></figure><h2 id="批量容器操作"><a href="#批量容器操作" class="headerlink" title="批量容器操作"></a>批量容器操作</h2><h3 id="Windows-PowerShell"><a href="#Windows-PowerShell" class="headerlink" title="Windows (PowerShell)"></a>Windows (PowerShell)</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动所有容器（需提前保存容器配置）</span></span><br><span class="line"><span class="built_in">Get-Content</span> containers.txt | <span class="built_in">ForEach-Object</span> &#123; docker <span class="built_in">start</span> <span class="variable">$_</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强力清除所有容器（生产环境慎用）</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-aq</span> | <span class="built_in">ForEach-Object</span> &#123; docker stop <span class="variable">$_</span> &#125; | <span class="built_in">ForEach-Object</span> &#123; docker <span class="built_in">rm</span> <span class="variable">$_</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安全模式操作（带确认提示）</span></span><br><span class="line"><span class="variable">$confirmation</span> = <span class="built_in">Read-Host</span> <span class="string">&quot;确认要删除所有容器？[y/n]&quot;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$confirmation</span> <span class="operator">-eq</span> <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">    docker <span class="built_in">ps</span> <span class="literal">-aq</span> | <span class="built_in">ForEach-Object</span> &#123; </span><br><span class="line">        docker stop <span class="variable">$_</span></span><br><span class="line">        docker <span class="built_in">rm</span> <span class="variable">$_</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Linux-MacOS"><a href="#Linux-MacOS" class="headerlink" title="Linux&#x2F;MacOS"></a>Linux&#x2F;MacOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 批量启动容器（需容器已存在）</span></span><br><span class="line">docker start $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量停止并删除（危险操作！）</span></span><br><span class="line">docker stop $(docker ps -aq) &amp;&amp; docker <span class="built_in">rm</span> $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安全脚本示例（带延时确认）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;即将删除所有运行中的容器&quot;</span></span><br><span class="line"><span class="built_in">sleep</span> 5</span><br><span class="line">docker ps -aq | xargs docker stop</span><br><span class="line">docker ps -aq | xargs docker <span class="built_in">rm</span></span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 注意事项：</p><ol><li>批量操作前建议执行 <code>docker ps -a</code> 确认容器列表</li><li>重要容器建议添加<code>--filter</code>参数过滤（如<code>--filter &quot;name=mysql&quot;</code>）</li><li>持久化数据请确保已做好volume映射</li><li>Windows路径中避免使用空格，必要时用双引号包裹路径<br>&#x2F;&#x2F; … existing code …</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Windows 特别提示：</span><br><span class="line">&gt; 1. 使用Docker Desktop需开启&quot;Use the WSL 2 based engine&quot;</span><br><span class="line">&gt; 2. 文件路径使用`/c/`替代`C:\`格式</span><br><span class="line">&gt; 3. 设置`COMPOSE_CONVERT_WINDOWS_PATHS=1`环境变量解决路径转换问题</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> 常用指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Docker</title>
      <link href="/2025/04/30/Linux-ubantu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2025/04/30/Linux-ubantu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<p><del>在此之前我掏钱买了另一个云服务器</del></p><p>在命令行中输入更新软件包索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>下载必要的软件包依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><p>添加官方密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>对于ubuntu 22.04 使用这个命令，当然其他也是同理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>安装docker引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430100620646.png" alt="image-20250430100620646"></p><p>出现这些就差不多了</p><p>查看docker版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430100712775.png" alt="image-20250430100712775"></p><p>出现版本号即为安装成功</p><p>检查docker是否在运行，绿色为运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430101437013.png" alt="image-20250430101437013"></p><p>启动Docker（在没有运行的情况下才使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>拉取测试镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull hello-world</span><br></pre></td></tr></table></figure><p>可能很慢，也可能失败</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430100936669.png" alt="image-20250430100936669"></p><p>很正常，毕竟现在docker官方源已经不能用了</p><p>测试拉取公开镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/acs-sample/nginx:latest</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430104902234.png" alt="image-20250430104902234"></p><p>出现Pull complete即可</p><p>运行一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name my-nginx \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  registry.cn-hangzhou.aliyuncs.com/acs-sample/nginx:latest</span><br></pre></td></tr></table></figure><p>查看运行状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430105551566.png" alt="image-20250430105551566" style="zoom:200%;" /><p>可以看到已经在运行了</p><p>设置镜像源</p><p>在该路径创建一个 daemon.json 文件</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430110922428.png" alt="image-20250430110922428"></p><p>daemon.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;builder&quot;: &#123;</span><br><span class="line">    &quot;gc&quot;: &#123;</span><br><span class="line">      &quot;defaultKeepStorage&quot;: &quot;20GB&quot;,</span><br><span class="line">      &quot;enabled&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;experimental&quot;: false,</span><br><span class="line">      &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">        &quot;https://dockerproxy.com&quot;,</span><br><span class="line">        &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">        &quot;https://docker.nju.edu.cn&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入以上内容后保存！保存！保存！</p><p>保存后重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><p>查看信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>查看镜像源是否起效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker info | grep Mirrors -A 4</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250430112447596.png" alt="image-20250430112447596"></p><p>这样就是成功添加4个镜像源了</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> 实操手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装Docker</title>
      <link href="/2025/04/27/Windows%E6%A1%8C%E9%9D%A2%E7%89%88%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2025/04/27/Windows%E6%A1%8C%E9%9D%A2%E7%89%88%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<h4 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h4><p>先下载 Docker ，去官⽹下载 Docker <a href="https://www.docker.com/">www.docker.com</a></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427181804971.png" alt="image-20250427181804971"></p><p>会久一点，可以魔法上网</p><p>下载好之后不计划装在C盘，于是打开cmd输入安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;‪C:\Users\zuiliu\Downloads\Docker Desktop Installer.exe&quot; install --installation-dir=&quot;E:\docker&quot;</span><br></pre></td></tr></table></figure><p>E:\docker为目标地址，弹出窗口后操作</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184052213.png" alt="image-20250427184052213"></p><p>点击ok，等待其完成，这里版本是4.40.0</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184115118.png" alt="image-20250427184115118"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184355223.png" alt="image-20250427184355223"></p><p>完成后关闭即可，在安装后路径点击</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184440181.png" alt="image-20250427184440181"></p><p>启动 docker 后⾸先点 Accept ，之后点 continue without … ，不登陆，然后点右上⻆ skip 忽略</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184644759.png" alt="image-20250427184644759"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427184651863.png" alt="image-20250427184651863"></p><p>下面进行汉化</p><p>先在安装后的路径打开 ..\frontend\resources,将app.asar 复制，粘贴到其他地方进行备份</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427185520518.png" alt="image-20250427185520518"></p><p>到<a href="https://github.com/asxez/DockerDesktop-CN/releases">Releases · asxez&#x2F;DockerDesktop-CN</a>下载对应版本的汉化包这里是4.40.0版本</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427185641012.png" alt="image-20250427185641012"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427185713954.png" alt="image-20250427185713954"></p><p>下载好后重命名为app.asar,与上文路径文件覆盖更新就行。</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427193409776.png" alt="image-20250427193409776"></p><p>打开右上角设置-资源-高级-浏览 更改下位置到其他盘</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250427193836529.png" alt="image-20250427193836529"></p><p>至此完成配置</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Windows </category>
          
          <category> 实操手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令使用</title>
      <link href="/2025/04/26/git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/04/26/git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>下载git（忽略）</p><p>打开git—bash</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426132227340.png" alt="image-20250426132227340"></p><p>从 gitee中克隆项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/draco99/23cs.git</span><br></pre></td></tr></table></figure><p>身份验证，分别是配置用户名与邮件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#x27;用户名&#x27; </span><br><span class="line">git config --global user.email &#x27;用户@mail.com&#x27;</span><br></pre></td></tr></table></figure><p>一般位置在user中</p><p>在该项目里右键-&gt;Open git bash here</p><p>即可打开该项目的命令行</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426183235121.png" alt="image-20250426183235121"></p><p>显示提交的日志，使用Q键退出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426192043733.png" alt="image-20250426192043733"></p><p>显示前1行日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -1  </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426192248851.png" alt="image-20250426192248851"></p><p>显示提交HEAD日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show HEAD</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426192349243.png" alt="image-20250426192349243"></p><p>查看tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426193032426.png" alt="image-20250426193032426"></p><p>没有打tag就不显示</p><p>删除某个文件（不敢动）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm xxx</span><br></pre></td></tr></table></figure><p>显示本地分支（这里就一个主分支dev）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426194018739.png" alt="image-20250426194018739"></p><p>确认分支状态（修改的文件夹）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426194753432.png" alt="image-20250426194753432"></p><p>先在远程拉取到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426200503116.png" alt="image-20250426200503116"></p><p>添加记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件/路径</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426201258106.png" alt="image-20250426201258106"></p><p>完成合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426200536417.png" alt="image-20250426200536417"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426201419760.png" alt="image-20250426201419760"></p><p>提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426200552679.png" alt="image-20250426200552679"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250426201528811.png" alt="image-20250426201528811"></p><p>参考（<a href="https://www.runoob.com/note/56524">Git 常用命令大全</a>）</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> 常用指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx流媒体配置</title>
      <link href="/2025/04/25/Ngnix%E9%85%8D%E7%BD%AE%E6%B5%81%E5%AA%92%E4%BD%93/"/>
      <url>/2025/04/25/Ngnix%E9%85%8D%E7%BD%AE%E6%B5%81%E5%AA%92%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h4 id="首先是视频与音频托管"><a href="#首先是视频与音频托管" class="headerlink" title="首先是视频与音频托管"></a>首先是视频与音频托管</h4><p>1、准备一些视频，并上传到云服务器，这里传到 C:&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;音视频&#x2F; 中</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424103813912.png" alt="image-20250424103813912"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424104616189.png" alt="image-20250424104616189"></p><p>2、在之前的Nginx配置文件中配置视频路径，支持中文字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 配置视频路径</span><br><span class="line">       location /video/ &#123;</span><br><span class="line">           alias &quot;C:/Users/Administrator/Desktop/音视频/&quot;;  # 注意使用正斜杠或双反斜杠</span><br><span class="line">           autoindex on;  # 可选：启用目录浏览功能</span><br><span class="line">           expires 30d;   # 设置缓存过期时间</span><br><span class="line"></span><br><span class="line">           # 可选：启用 gzip 压缩以减少带宽消耗</span><br><span class="line">           gzip on;</span><br><span class="line">           gzip_types video/mp4 application/x-mpegURL;</span><br><span class="line">           gzip_vary on;</span><br><span class="line">           # 启用字节范围请求</span><br><span class="line">           add_header Accept-Ranges bytes;</span><br><span class="line">           add_header Content-Disposition inline;</span><br><span class="line">       &#125;        </span><br></pre></td></tr></table></figure><p>3、使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure><p>更新配置</p><p>4、浏览器输入 (http:&#x2F;&#x2F;服务器IP:8088&#x2F;video&#x2F;pv01.mp4) 可以发现浏览器已经帮你下载好了</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424104906268.png" alt="image-20250424104906268"></p><p>启用目录浏览的功能后可以清晰的看到文件</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424105033106.png" alt="image-20250424105033106"></p><p>但是，中文在这里显示会异常，注意甄别，音频界面如下</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424105338039.png" alt="image-20250424105338039"></p><p>类似BIliBIli或网易云音乐那样，简单的写一个视频播放列表的网页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>在线播放视频<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>选择要播放的视频<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;videoList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;videoPlayer&quot;</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;360&quot;</span> <span class="attr">controls</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span></span><br><span class="line">        您的浏览器不支持视频播放。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取视频文件列表</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&#x27;http://云服务器IP:8088/video/&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> parser = <span class="keyword">new</span> <span class="title class_">DOMParser</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> doc = parser.<span class="title function_">parseFromString</span>(html, <span class="string">&#x27;text/html&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> links = <span class="title class_">Array</span>.<span class="title function_">from</span>(doc.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a[href$=&quot;.mp4&quot;]&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> videoList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;videoList&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> videoPlayer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;videoPlayer&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                links.<span class="title function_">forEach</span>(<span class="function"><span class="params">link</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> videoName = link.<span class="property">textContent</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    li.<span class="property">innerHTML</span> = <span class="string">`&lt;a href=&quot;#&quot; onclick=&quot;playVideo(&#x27;<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(videoName)&#125;</span>&#x27;)&quot;&gt;<span class="subst">$&#123;videoName&#125;</span>&lt;/a&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">                    videoList.<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 播放视频</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">window</span>.<span class="property">playVideo</span> = <span class="keyword">function</span>(<span class="params">videoFile</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    videoPlayer.<span class="property">src</span> = <span class="string">`http://云服务器IP:8088/video/<span class="subst">$&#123;videoFile&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">                    videoPlayer.<span class="property">type</span> = <span class="string">&#x27;video/mp4&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    videoPlayer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    videoPlayer.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;无法加载视频列表:&#x27;</span>, error));</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单的写的页面效果（测试功能，没必要调（）</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250424105852935.png" alt="image-20250424105852935"></p><p>这样只需点击列表即可切换视频进行观看，Nginx的性能优化很棒，播放的视频是没有压缩的，负载也小</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
          <category> 实操手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 自媒体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx实践操作</title>
      <link href="/2025/04/20/Nginx%E5%AE%9E%E6%93%8D%EF%BC%81/"/>
      <url>/2025/04/20/Nginx%E5%AE%9E%E6%93%8D%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h4 id="Nginx安装实操！"><a href="#Nginx安装实操！" class="headerlink" title="Nginx安装实操！"></a>Nginx安装实操！</h4><p>打开上文中的<a href="https://nginx.org/en/">官网</a> ，在右侧点击 download </p><p><img src="https://img.picui.cn/free/2025/04/18/68023c1847862.png"></p><p>或者<a href="https://nginx.org/en/download.html">直转下载</a></p><p>这里选择稳定版本，左侧红框为linux版本，右侧是windows版本</p><p><img src="https://img.picui.cn/free/2025/04/18/68023d163cb43.png"></p><h5 id="windows内找一个适合的路径解压，注意路径中不能有中文！！！"><a href="#windows内找一个适合的路径解压，注意路径中不能有中文！！！" class="headerlink" title="windows内找一个适合的路径解压，注意路径中不能有中文！！！"></a>windows内找一个适合的路径解压，注意路径中不能有中文！！！</h5><p><img src="https://img.picui.cn/free/2025/04/18/68023eeca5bf6.png"></p><p>双击exe，打开任务管理器，里面有相对应的进程就启动成功了</p><p><img src="https://img.picui.cn/free/2025/04/18/6802450432c3d.png"></p><p>打开位于 conf 的 nginx.conf 文件，这个是nginx的配置文件，默认配置的nginx监听的端口为80。</p><p><img src="https://img.picui.cn/free/2025/04/18/68024237b91fe.png"></p><p>在正常情况下，浏览器输入 <a href="http://localhost/">localhost</a> 是可以看到nginx的欢迎页面的</p><p>但是我出现了这个情况（请忽视https，是输入后被跳转的）</p><p><img src="https://img.picui.cn/free/2025/04/18/680243246daa3.png"></p><p>这种情况一般是设备的80端口被占用，可以在配置文件（nginx.conf）修改为未被占用的端口即可。</p><p>把监听端口修改成为了82，</p><p>当我们修改了nginx的配置文件nginx.conf 时，不需要关闭nginx后重新启动nginx，我们只需要使用管理员权限打开CMD或者Powershell，使用”D:”切换盘符，如果是C盘就直接使用 cd + 你之前解压的路径 来指定路径。</p><p><img src="https://img.picui.cn/free/2025/04/18/68024b0f64f2b.png"></p><p>然后执行命令，就可以重载配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload </span><br></pre></td></tr></table></figure><p>执行下列指令来检查nginx是否在线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist | findstr nginx</span><br></pre></td></tr></table></figure><p>如果在线会出现俩个进程</p><p><img src="https://img.picui.cn/free/2025/04/18/68024bee55ed5.png"></p><p>之后再到浏览器输入 <a href="http://localhost:82/">localhost</a> 就可以看到欢迎页面了，也代表启动成功</p><p><img src="https://img.picui.cn/free/2025/04/18/68024a4394ad3.png"></p><p>打开软件路径里的html文件夹，可以看到index.html和50x.html，这是可以放入自己写的网页</p><p><img src="https://img.picui.cn/free/2025/04/18/68024e8e75883.png"></p><p>当然，网页的名字同样不能使用中文</p><p><img src="https://img.picui.cn/free/2025/04/18/68024fd407a0e.png"></p><p><img src="https://img.picui.cn/free/2025/04/18/68024f8974fff.png"></p><p>甚至是文件，当然这个之后再说</p><h5 id="Linux系统的安装"><a href="#Linux系统的安装" class="headerlink" title="Linux系统的安装"></a>Linux系统的安装</h5><p>在下载好Linux版本的Nginx后，打开你的Linux机器登录，这里使用FinalShell进行操作，优点是可以直接对linux进行文件管理。此机器是本地的Linux虚拟机、云服务器则直接使用域名或者公网进行链接，操作方式是相同的</p><p>在linux机器使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>进行查看此linux的ip，发现是192.168.128.128</p><p><img src="https://img.picui.cn/free/2025/04/19/68034acd7a3db.png">、</p><p>使用这俩个命令来检查其依赖是否安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep gcc</span><br><span class="line">rpm -qa|grep pcre</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/04/19/680340db25dfe.png">像这样就安装好了</p><p>如果没有，则使用在线安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p>如果还是没有效果的话在网络上寻找相关的rpm包，比如pcre-devel-8.32-17.el7.x86_64.rpm、pcre-8.32-17.el7.x86_64.rpm这两个包</p><p>下载好上传到服务器进行安装，安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh pcre-devel-8.32-17.el7.x86_64.rpm</span><br><span class="line">rpm -ivh pcre-8.32-17.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>之后将下载好的本体安装包拖入到你喜欢的文件夹里</p><p><img src="https://img.picui.cn/free/2025/04/19/6803445291ff3.png"></p><p>使用cd 到该压缩包目录之后（这里是&#x2F;export&#x2F;software）进行解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.26.3.tar.gz</span><br></pre></td></tr></table></figure><p>移动到server里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /export/software/nginx-1.26.3 /export/servers/</span><br></pre></td></tr></table></figure><p>cd到服务器的位置,接着执行下面的指令，稍等片刻安装完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /export/servers/nginx-1.26.3 </span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>cd切换目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br></pre></td></tr></table></figure><p>使用.&#x2F;nginx启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>放行80端口（如果在配置文件修改后请修改到对应端口）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><p>这个指令可以在本地访问网页，当出现html文本格式时即为成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:80</span><br></pre></td></tr></table></figure><p>浏览器访问时需要注意你的Linux是可联网、有IP地址的，端口放行了的</p><img src="https://img.picui.cn/free/2025/04/19/68034f22de100.png" style="zoom:80%;" /><h4 id="常用指令-WINDOWS"><a href="#常用指令-WINDOWS" class="headerlink" title="常用指令(WINDOWS)"></a>常用指令(WINDOWS)</h4><p>强行停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /F /IM nginx.exe</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>重载配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload </span><br></pre></td></tr></table></figure><p>检查nginx是否在线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist | findstr nginx</span><br></pre></td></tr></table></figure><p>检查80端口是否被占用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr :80</span><br></pre></td></tr></table></figure><h4 id="常用指令-Linux"><a href="#常用指令-Linux" class="headerlink" title="常用指令(Linux)"></a>常用指令(Linux)</h4><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /export/servers/nginx-1.26.3  (你目录)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>重载配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p>快速停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure><p>等工作后停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s quit</span><br></pre></td></tr></table></figure><h4 id="Nginx的反向代理实操"><a href="#Nginx的反向代理实操" class="headerlink" title="Nginx的反向代理实操"></a>Nginx的反向代理实操</h4><p>​在此之前先简单写一个后端，这里先忽视SSL证书，毕竟是测试不着急使用。</p><p>项目结构，这里偷懒使用了IDEA自带的生成器。</p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420215023976.png" alt="image-20250420215023976" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TestController.java 部分</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.boottestduoduan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;testPath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleTest</span><span class="params">(<span class="meta">@PathVariable</span> String testPath)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;处理路径：&quot;</span> + testPath + <span class="string">&quot;，当前端口：&quot;</span> + System.getProperty(<span class="string">&quot;server.port&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了图方便弄了个启动bat脚本，把查询到的启动指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line"></span><br><span class="line">start cmd /k &quot;java -Dserver.port=8081 -DPORT=8081 -jar target\boot-testduoduan-0.0.1-SNAPSHOT.jar --testPath=test01&quot;</span><br><span class="line">start cmd /k &quot;java -Dserver.port=8082 -DPORT=8082 -jar target\boot-testduoduan-0.0.1-SNAPSHOT.jar --testPath=test02&quot;</span><br><span class="line">start cmd /k &quot;java -Dserver.port=8083 -DPORT=8083 -jar target\boot-testduoduan-0.0.1-SNAPSHOT.jar --testPath=test03&quot;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>给项目打包，传到云服务器并启动</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420221947018.png" alt="image-20250420221947018"></p><p>之后给Ngnix配置简单的反向代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen       8088;</span><br><span class="line">    server_name  服务器IP;  # 这里是云服务器的公网ip</span><br><span class="line">    </span><br><span class="line">    # 这里使用proxy_pass指令来实现反向代理，把所有请求代理到后端</span><br><span class="line">    # proxy_set_header 来确保Host头部可以传到后端服务器</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:80;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过里面没有设置负载均衡，但实现了反向代理，效果如下</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420225522220.png" alt="image-20250420225522220"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420225552229.png" alt="image-20250420225552229"></p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420223740614.png" alt="image-20250420223740614"></p><p>在浏览器输入 http:&#x2F;&#x2F;公网ip:8088&#x2F;test01.html 后，多次刷新发起请求，可以发现其已经映射到test01的三个端口轮流顺序</p><p>8081&#x3D;&gt;8082&#x3D;&gt;8083&#x3D;&gt;8082&#x3D;&gt;8081进行展示的</p><p>如果需要添加负载均衡也很简单在http{}模块内使用upstream实现负载均衡（见Nginx初步了解）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">        server 127.0.0.1:80;</span><br><span class="line">        server 127.0.0.1:8080;#这里怎么设置服务器都行</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">######</span><br><span class="line">  upstream backend &#123;</span><br><span class="line">        server 127.0.0.1:80;</span><br><span class="line">        server 127.0.0.1:8080;#这里怎么设置服务器都行</span><br><span class="line">    &#125;</span><br><span class="line">######</span><br><span class="line">  server &#123;</span><br><span class="line">    listen       8088;</span><br><span class="line">    server_name  服务器IP;  # 这里是云服务器的公网ip</span><br><span class="line">    </span><br><span class="line">    # 这里使用proxy_pass指令来实现反向代理，把所有请求代理到后端</span><br><span class="line">    # proxy_set_header 来确保Host头部可以传到后端服务器</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:80;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（拓展）使用Openssl生成临时证书"><a href="#（拓展）使用Openssl生成临时证书" class="headerlink" title="（拓展）使用Openssl生成临时证书"></a>（拓展）使用Openssl生成临时证书</h5><p>先根据此文章把Openssl安装好 <a href="https://blog.csdn.net/loveryunz/article/details/136739887">保姆级OpenSSL下载及安装教程,OpenSSL下载及安装教程-CSDN博客</a></p><p>之后单击安装的路径输入cmd</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420212433077.png" alt="image-20250420212433077"></p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br></pre></td></tr></table></figure><p>检验，出现下面指令即为正常</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420212503930.png" alt="image-20250420212503930"></p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:2048 -keyout private.key -out certificate.crt -days 365 -nodes</span><br></pre></td></tr></table></figure><p>来进行快速生成一个测试证书与为期一年的密钥</p><p>之后出现这些页面，按要求填写就行，不想填可以直接输入 <strong>.</strong>，其中Common Name需要填你的服务器地址，如果是本地就填localhost</p><p>这里我把云服务器地址码了</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420213035900.png" alt="image-20250420213035900"></p><p>这时候就弄好了，图中勾选的就是</p><p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250420213600016.png" alt="image-20250420213600016"></p><p>之后正常配置添加就行了，唯一的缺点是不是受信任的证书，这里不详细展示了</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
          <category> 实操手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基本概念</title>
      <link href="/2025/04/19/Nginx%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/"/>
      <url>/2025/04/19/Nginx%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx基本概念"><a href="#Nginx基本概念" class="headerlink" title="Nginx基本概念"></a>Nginx基本概念</h2><p>目录：</p><ol><li>-<a href="#%E6%98%AF%E4%BB%80%E4%B9%88">Nginx究竟是什么？</a></li><li>-<a href="%E4%BB%80%E4%B9%88%E7%89%B9%E5%88%AB%E7%9A%84">Nginx有什么特别之处？</a></li><li>-<a href="%E6%AD%A3%E5%90%91%E4%B8%8E%E5%8F%8D%E5%90%91">Nginx的反向代理</a></li><li>-<a href="%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">Nginx的负载均衡</a></li></ol><h5 id="1、Nginx究竟是什么？"><a href="#1、Nginx究竟是什么？" class="headerlink" title="1、Nginx究竟是什么？"></a>1、Nginx究竟是什么？<a id="是什么"></a></h5><p>​打开它的<a href="https://nginx.org/en/">官网</a> 发现语言选项只有英文与俄文，是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的一个高性能的HTTP好反向代理web的服务器，同时提供了IMAP&#x2F;POP3&#x2F;SMTP服务。</p><h5 id="2、Nginx有什么特别之处？"><a href="#2、Nginx有什么特别之处？" class="headerlink" title="2、Nginx有什么特别之处？"></a>2、Nginx有什么特别之处？<a id="什么特别的"></a></h5><ul><li><strong>轻量级</strong>的Web 服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器</li><li>占的<strong>内存少</strong>！<strong>高并发</strong>能力更强！</li><li>支持<strong>热部署</strong>，启动<strong>简单</strong>！</li></ul><h5 id="3、Nginx的反向代理"><a href="#3、Nginx的反向代理" class="headerlink" title="3、Nginx的反向代理"></a>3、Nginx的反向代理<a id="正向与反向"></a></h5><h6 id="在此之前，什么是代理呢？作用是？"><a href="#在此之前，什么是代理呢？作用是？" class="headerlink" title="在此之前，什么是代理呢？作用是？"></a>在此之前，什么是代理呢？作用是？</h6><p>​代理（Proxy）在网络中是指一个中间服务器，它代表客户端或服务器来发送网络请求或接收响应。代理服务器本质上是一个中介角色，位于客户端和目标服务器之间。通过代理，原始的请求会被转发到目标服务器，而响应也会通过代理返回给最初的请求发起者。常见于VPN、加速器、与项目部署的代理。</p><p>​代理主要作用是：保护隐私、控制访问、性能优化、负载均衡、跨越网络限制。通过代理对客户端的ip进行保护、添加缓存、权限管理、绕过网络防火墙等操作保障使用与安全。</p><h6 id="这是通常情况下浏览器与服务器的链接"><a href="#这是通常情况下浏览器与服务器的链接" class="headerlink" title="这是通常情况下浏览器与服务器的链接"></a>这是通常情况下浏览器与服务器的链接</h6><p>​<img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250417222831582.png" alt="image-20250417222831582"></p><h6 id="我们在浏览外部网站时经过国内服务器一般是打不开的，一般会本地搭建个服务器来帮忙，这样以通过配置一个正向代理服务器来间接访问互联网上的资源的链接方式即为正向代理"><a href="#我们在浏览外部网站时经过国内服务器一般是打不开的，一般会本地搭建个服务器来帮忙，这样以通过配置一个正向代理服务器来间接访问互联网上的资源的链接方式即为正向代理" class="headerlink" title="我们在浏览外部网站时经过国内服务器一般是打不开的，一般会本地搭建个服务器来帮忙，这样以通过配置一个正向代理服务器来间接访问互联网上的资源的链接方式即为正向代理"></a>我们在浏览外部网站时经过国内服务器一般是打不开的，一般会本地搭建个服务器来帮忙，这样以通过配置一个正向代理服务器来间接访问互联网上的资源的链接方式即为正向代理</h6><h6 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250417223545112.png" alt="image-20250417223545112"></h6><p>后端的服务器可以按需要扩充，服务变多之后，每个服务对应都有IP与端口，所以在之间提供一个进程让其对外一个URL域名，进程来时将这些请求均匀的转发到每个服务器</p><img src="https://gitee.com/zuiliuaaaaab/figurebed/raw/master/img/image-20250419203253366.png" alt="image-20250419203253366" style="zoom:50%;" /><h6 id="Nginx的反向代理"><a href="#Nginx的反向代理" class="headerlink" title="Nginx的反向代理"></a>Nginx的反向代理</h6><p>​Nginx的反向代理则是为服务器设计的，是 Nginx 的核心功能之一。它代表服务器接收客户端请求与处理，并根据具体情况将这些请求转发给一个或多个后端服务器处理。反向代理对于客户端来说是透明的，客户端并不知道它的存在。Nginx常被用作高性能的反向代理服务器，用于实现负载均衡、加速静态内容服务等目的。但是客户端眼里，服务器只有唯一的一台，就是代理服务器。这么做不论在保护用户隐私上还是服务器访问压力下都可以得到很好的缓解与优化。</p><p>​反向代理有以下核心功能： </p><p>​<strong>负载均衡</strong>：将请求分发到多个后端服务器。</p><p>​<strong>安全防护</strong>：隐藏后端服务器 IP，防止直接暴露。</p><p>​<strong>SSL 终结</strong>：由 Nginx 统一处理 HTTPS 加密&#x2F;解密，降低后端压力。</p><p>​<strong>缓存加速</strong>：缓存静态资源，提升响应速度。</p><p>​<strong>路由转发</strong>：根据路径、域名等规则，将请求导向不同服务。</p><p>​这里是简单的反向代理配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;                          # 监听公网 80 端口</span><br><span class="line">    server_name example.com;            # 你的域名或服务器 IP</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:3000;  # 核心指令：转发到本地 3000 端口</span><br><span class="line"></span><br><span class="line">        # 透传客户端信息（关键！否则后端可能无法获取真实 IP 等）</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">配置项</th><th>用途</th></tr></thead><tbody><tr><td align="left">proxy_pass</td><td>核心指令，定义转发目标地址</td></tr><tr><td align="left">proxy_set_header</td><td>透传客户端原始信息，确保后端服务能获取真实 IP、协议、域名等</td></tr><tr><td align="left">listen 80</td><td>监听标准 HTTP 端口，默认80</td></tr><tr><td align="left">server_name</td><td>指定域名，可配置多个或通配符</td></tr></tbody></table><p>这是将&#x2F;api的请求来转发到Java服务（8081），其他请求转发到Node.js前端(3000)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location /api &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8081;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:3000;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>特性</strong></th><th><strong>反向代理</strong></th><th><strong>正向代理</strong></th></tr></thead><tbody><tr><td><strong>客户端感知</strong></td><td>无感知（以为在访问真实服务器）</td><td>需主动配置代理服务器</td></tr><tr><td><strong>用途</strong></td><td>保护后端、负载均衡、缓存加速</td><td>突破网络限制、匿名访问</td></tr><tr><td><strong>典型代表</strong></td><td>Nginx、Cloudflare</td><td>Shadowsocks、Charles</td></tr></tbody></table><p>通过反向代理，Nginx 可轻松实现服务的统一入口管理和安全防护，是微服务架构中不可或缺的组件。</p><h5 id="4、Nginx的负载均衡"><a href="#4、Nginx的负载均衡" class="headerlink" title="4、Nginx的负载均衡"></a>4、Nginx的负载均衡<a id="负载均衡"></a></h5><p>​Nginx实现负载均衡主要是通过其反向代理功能来分发客户端请求到多个后端服务器，以达到优化资源使用、提高响应速度和增加系统可靠性等目的，它充当客户端和后端服务器之间的中间人，<strong>对外隐藏真实服务器</strong>。换句话说，当一个服务器压力大的时候，Nginx会安排另外的几个服务器来帮忙分担任务。客户端只需要访问一个对外的服务器地址既可安排真实服务器与其对接。</p><p>Nginx支持多种负载均衡算法，可以在<code>upstream</code>块中指定：</p><ol><li><strong>轮询（默认）</strong>：每个请求按时间顺序逐一分配到不同的后端服务器。如果后端服务器down掉，能自动剔除。它按照上游池中服务器列表的顺序分发请求。当上游服务器的容量变化时，还可以考虑使用加权轮询。适合服务器配置相当，无状态且短平快的服务使用。也适用于图片服务器集群和纯静态页面服务器集群。但不适合有异构工作负载或服务器池的用例。</li><li><strong>权重（weight）</strong>：根据权重分配请求，权重越高的服务器处理的请求越多。适用于服务器性能差异较大的场景。这种方式比较灵活,用于后端服务器性能不均的情况。</li><li><strong>IP哈希（ip_hash）</strong>：仅适用于 HTTP。IP 哈希算法使用客户端 IP 地址作为哈希。IP 哈希与通用 哈希存在细微的不同，前者使用 IPv4 地址的前三个八进制位或整个 IPv6 地址，而 后者使用的是远程变量。当会话状态十分重要，但又无法通过应用的共享内存进行 处理时，此方法可确保客户端始终被代理到同一上游服务器（只要服务器可用）。基于客户端IP地址的哈希值选择服务器，确保来自同一IP的请求总是被发送到相同的服务器上，除非该服务器不可用。如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</li><li><strong>最少连接（least_conn）</strong>：通过将当前请求代理到打开连接数最少的上游服务器实现负载均衡，将下一个请求分配给当前活跃连接数最少的服务器，最少连接也会考虑权重，适合长连接的情况。</li></ol><p>Nginx中的常见的负载均衡分为 HTTP 负载均衡、TCP 负载均衡、UDP 负载均衡这3种。</p><p>​举个例子，将负载分发到两个HTTP服务器上，在Nginx路径下的config文件里的配置文件中找到http模块，将使用</p><p>upstream代码块来实施,写入到http{}模块内就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">  server 10.10.12.45:80 weight=1;</span><br><span class="line">  server app.example.com:80 weight=2;</span><br><span class="line">  server spare.example.com:80 backup;</span><br><span class="line"> &#125;</span><br><span class="line"> server &#123;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://backend;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该配置对端口 80 的两台 HTTP 服务器实施负载均衡，然后再将另一台服务器定义为  backup，以便在两台主服务器不可用时发挥作用。可选的 weight 参数指示 NGINX 向 第二台服务器传输两倍的请求。未使用时，它的默认值为 1。这样权重分配可以控制Http的负载均衡。权重越大、该服务器压力与请求相对越大。</p><p>​而TCP负载均衡也与之大差不差，主要区别是在stream模块中实施,它们在OSI模型的不同层上运行，这个例子中的 server 代码块指示 NGINX 侦听 TCP 端口 3306，并在两个 MySQL 数据库 读取副本之间实施负载均衡，同时将另一台服务器定义为 backup，以便在主服务器崩溃时接管流量。stream 上下文默认情况下只能对数据包进行路由和负载均衡。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">  upstream mysql_read &#123;</span><br><span class="line">    server read1.example.com:3306 weight=5;</span><br><span class="line">    server read2.example.com:3306;</span><br><span class="line">    server 10.10.12.34:3306 backup;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 3306;</span><br><span class="line">    proxy_pass mysql_read;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>​UDP 负载均衡的指定非常简单，只需使用 listen 指令中的 udp 参数便可。在 NGINX 的 stream 模块内使用 upstream 代码块（定义为 udp）对 UDP 服务器实施负载均衡。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">  upstream ntp &#123;</span><br><span class="line">    server ntp1.example.com:123 weight=2;</span><br><span class="line">    server ntp2.example.com:123;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 123 udp;</span><br><span class="line">    proxy_pass ntp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 TCP 类似，我们可以在 stream 模块中找到 UDP 负载均衡，并以同样的方式完成大部分配置。两者的主要区别在于，UDP 负载均衡的 listen 指令指定打开的套接字用于处 理 UDP 数据报（datagram）。UDP 负载均衡可能对某些企业来说不太常见，但在大 型环境中十分有用。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
